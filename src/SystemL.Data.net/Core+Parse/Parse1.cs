//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Core_Parse {
    using System;
    using System.Diagnostics;
    using System.Runtime.InteropServices;
    
    // The following table contains information about every rule that is used during the reduce.
    public class sqlite3Parser : System.IDisposable {
        protected const int NOCODE = 251;
        protected const int WILDCARD = 67;
        protected const int STATES = 627;
        protected const int ERRORSYMBOL = 0;
        private string _tracePrompt;
        #region Trace: Token Names
        protected static string[] _tokenNames = new string[] {
                "$",
                "SEMI",
                "EXPLAIN",
                "QUERY",
                "PLAN",
                "BEGIN",
                "TRANSACTION",
                "DEFERRED",
                "IMMEDIATE",
                "EXCLUSIVE",
                "COMMIT",
                "END",
                "ROLLBACK",
                "SAVEPOINT",
                "RELEASE",
                "TO",
                "TABLE",
                "CREATE",
                "IF",
                "NOT",
                "EXISTS",
                "TEMP",
                "LP",
                "RP",
                "AS",
                "COMMA",
                "ID",
                "INDEXED",
                "ABORT",
                "ACTION",
                "AFTER",
                "ANALYZE",
                "ASC",
                "ATTACH",
                "BEFORE",
                "BY",
                "CASCADE",
                "CAST",
                "COLUMNKW",
                "CONFLICT",
                "DATABASE",
                "DESC",
                "DETACH",
                "EACH",
                "FAIL",
                "FOR",
                "IGNORE",
                "INITIALLY",
                "INSTEAD",
                "LIKE_KW",
                "MATCH",
                "NO",
                "KEY",
                "OF",
                "OFFSET",
                "PRAGMA",
                "RAISE",
                "REPLACE",
                "RESTRICT",
                "ROW",
                "TRIGGER",
                "VACUUM",
                "VIEW",
                "VIRTUAL",
                "REINDEX",
                "RENAME",
                "CTIME_KW",
                "ANY",
                "OR",
                "AND",
                "IS",
                "BETWEEN",
                "IN",
                "ISNULL",
                "NOTNULL",
                "NE",
                "EQ",
                "GT",
                "LE",
                "LT",
                "GE",
                "ESCAPE",
                "BITAND",
                "BITOR",
                "LSHIFT",
                "RSHIFT",
                "PLUS",
                "MINUS",
                "STAR",
                "SLASH",
                "REM",
                "CONCAT",
                "COLLATE",
                "BITNOT",
                "STRING",
                "JOIN_KW",
                "CONSTRAINT",
                "DEFAULT",
                "NULL",
                "PRIMARY",
                "UNIQUE",
                "CHECK",
                "REFERENCES",
                "AUTOINCR",
                "ON",
                "INSERT",
                "DELETE",
                "UPDATE",
                "SET",
                "DEFERRABLE",
                "FOREIGN",
                "DROP",
                "UNION",
                "ALL",
                "EXCEPT",
                "INTERSECT",
                "SELECT",
                "DISTINCT",
                "DOT",
                "FROM",
                "JOIN",
                "USING",
                "ORDER",
                "GROUP",
                "HAVING",
                "LIMIT",
                "WHERE",
                "INTO",
                "VALUES",
                "INTEGER",
                "FLOAT",
                "BLOB",
                "REGISTER",
                "VARIABLE",
                "CASE",
                "WHEN",
                "THEN",
                "ELSE",
                "INDEX",
                "ALTER",
                "ADD",
                "error",
                "input",
                "cmdlist",
                "ecmd",
                "explain",
                "cmdx",
                "cmd",
                "transtype",
                "trans_opt",
                "nm",
                "savepoint_opt",
                "create_table",
                "create_table_args",
                "createkw",
                "temp",
                "ifnotexists",
                "dbnm",
                "columnlist",
                "conslist_opt",
                "select",
                "column",
                "columnid",
                "type",
                "carglist",
                "id",
                "ids",
                "typetoken",
                "typename",
                "signed",
                "plus_num",
                "minus_num",
                "ccons",
                "term",
                "expr",
                "onconf",
                "sortorder",
                "autoinc",
                "idxlist_opt",
                "refargs",
                "defer_subclause",
                "refarg",
                "refact",
                "init_deferred_pred_opt",
                "conslist",
                "tconscomma",
                "tcons",
                "idxlist",
                "defer_subclause_opt",
                "orconf",
                "resolvetype",
                "raisetype",
                "ifexists",
                "fullname",
                "oneselect",
                "multiselect_op",
                "distinct",
                "selcollist",
                "from",
                "where_opt",
                "groupby_opt",
                "having_opt",
                "orderby_opt",
                "limit_opt",
                "sclp",
                "as",
                "seltablist",
                "stl_prefix",
                "joinop",
                "indexed_opt",
                "on_opt",
                "using_opt",
                "joinop2",
                "inscollist",
                "sortlist",
                "nexprlist",
                "setlist",
                "insert_cmd",
                "inscollist_opt",
                "valuelist",
                "exprlist",
                "likeop",
                "between_op",
                "in_op",
                "case_operand",
                "case_exprlist",
                "case_else",
                "uniqueflag",
                "collate",
                "nmnum",
                "number",
                "trigger_decl",
                "trigger_cmd_list",
                "trigger_time",
                "trigger_event",
                "foreach_clause",
                "when_clause",
                "trigger_cmd",
                "trnm",
                "tridxby",
                "database_kw_opt",
                "key_opt",
                "add_column_fullname",
                "kwcolumn_opt",
                "create_vtab",
                "vtabarglist",
                "vtabarg",
                "vtabargtoken",
                "lp",
                "anylist"};
        #endregion
        #region Trace: Rule Names
        protected static string[] _ruleNames = new string[] {
                "input ::= cmdlist",
                "cmdlist ::= cmdlist ecmd",
                "cmdlist ::= ecmd",
                "ecmd ::= SEMI",
                "ecmd ::= explain cmdx SEMI",
                "explain ::=",
                "explain ::= EXPLAIN",
                "explain ::= EXPLAIN QUERY PLAN",
                "cmdx ::= cmd",
                "cmd ::= BEGIN transtype trans_opt",
                "trans_opt ::=",
                "trans_opt ::= TRANSACTION",
                "trans_opt ::= TRANSACTION nm",
                "transtype ::=",
                "transtype ::= DEFERRED",
                "transtype ::= IMMEDIATE",
                "transtype ::= EXCLUSIVE",
                "cmd ::= COMMIT trans_opt",
                "cmd ::= END trans_opt",
                "cmd ::= ROLLBACK trans_opt",
                "savepoint_opt ::= SAVEPOINT",
                "savepoint_opt ::=",
                "cmd ::= SAVEPOINT nm",
                "cmd ::= RELEASE savepoint_opt nm",
                "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
                "cmd ::= create_table create_table_args",
                "create_table ::= createkw temp TABLE ifnotexists nm dbnm",
                "createkw ::= CREATE",
                "ifnotexists ::=",
                "ifnotexists ::= IF NOT EXISTS",
                "temp ::= TEMP",
                "temp ::=",
                "create_table_args ::= LP columnlist conslist_opt RP",
                "create_table_args ::= AS select",
                "columnlist ::= columnlist COMMA column",
                "columnlist ::= column",
                "column ::= columnid type carglist",
                "columnid ::= nm",
                "id ::= ID",
                "id ::= INDEXED",
                "ids ::= ID|STRING",
                "nm ::= id",
                "nm ::= STRING",
                "nm ::= JOIN_KW",
                "type ::=",
                "type ::= typetoken",
                "typetoken ::= typename",
                "typetoken ::= typename LP signed RP",
                "typetoken ::= typename LP signed COMMA signed RP",
                "typename ::= ids",
                "typename ::= typename ids",
                "signed ::= plus_num",
                "signed ::= minus_num",
                "carglist ::= carglist ccons",
                "carglist ::=",
                "ccons ::= CONSTRAINT nm",
                "ccons ::= DEFAULT term",
                "ccons ::= DEFAULT LP expr RP",
                "ccons ::= DEFAULT PLUS term",
                "ccons ::= DEFAULT MINUS term",
                "ccons ::= DEFAULT id",
                "ccons ::= NULL onconf",
                "ccons ::= NOT NULL onconf",
                "ccons ::= PRIMARY KEY sortorder onconf autoinc",
                "ccons ::= UNIQUE onconf",
                "ccons ::= CHECK LP expr RP",
                "ccons ::= REFERENCES nm idxlist_opt refargs",
                "ccons ::= defer_subclause",
                "ccons ::= COLLATE ids",
                "autoinc ::=",
                "autoinc ::= AUTOINCR",
                "refargs ::=",
                "refargs ::= refargs refarg",
                "refarg ::= MATCH nm",
                "refarg ::= ON INSERT refact",
                "refarg ::= ON DELETE refact",
                "refarg ::= ON UPDATE refact",
                "refact ::= SET NULL",
                "refact ::= SET DEFAULT",
                "refact ::= CASCADE",
                "refact ::= RESTRICT",
                "refact ::= NO ACTION",
                "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
                "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
                "init_deferred_pred_opt ::=",
                "init_deferred_pred_opt ::= INITIALLY DEFERRED",
                "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
                "conslist_opt ::=",
                "conslist_opt ::= COMMA conslist",
                "conslist ::= conslist tconscomma tcons",
                "conslist ::= tcons",
                "tconscomma ::= COMMA",
                "tconscomma ::=",
                "tcons ::= CONSTRAINT nm",
                "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
                "tcons ::= UNIQUE LP idxlist RP onconf",
                "tcons ::= CHECK LP expr RP onconf",
                "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subcl" +
                    "ause_opt",
                "defer_subclause_opt ::=",
                "defer_subclause_opt ::= defer_subclause",
                "onconf ::=",
                "onconf ::= ON CONFLICT resolvetype",
                "orconf ::=",
                "orconf ::= OR resolvetype",
                "resolvetype ::= raisetype",
                "resolvetype ::= IGNORE",
                "resolvetype ::= REPLACE",
                "cmd ::= DROP TABLE ifexists fullname",
                "ifexists ::= IF EXISTS",
                "ifexists ::=",
                "cmd ::= createkw temp VIEW ifnotexists nm dbnm AS select",
                "cmd ::= DROP VIEW ifexists fullname",
                "cmd ::= select",
                "select ::= oneselect",
                "select ::= select multiselect_op oneselect",
                "multiselect_op ::= UNION",
                "multiselect_op ::= UNION ALL",
                "multiselect_op ::= EXCEPT|INTERSECT",
                "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt or" +
                    "derby_opt limit_opt",
                "distinct ::= DISTINCT",
                "distinct ::= ALL",
                "distinct ::=",
                "sclp ::= selcollist COMMA",
                "sclp ::=",
                "selcollist ::= sclp expr as",
                "selcollist ::= sclp STAR",
                "selcollist ::= sclp nm DOT STAR",
                "as ::= AS nm",
                "as ::= ids",
                "as ::=",
                "from ::=",
                "from ::= FROM seltablist",
                "stl_prefix ::= seltablist joinop",
                "stl_prefix ::=",
                "seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt",
                "seltablist ::= stl_prefix LP select RP as on_opt using_opt",
                "seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt",
                "dbnm ::=",
                "dbnm ::= DOT nm",
                "fullname ::= nm dbnm",
                "joinop ::= COMMA|JOIN",
                "joinop ::= JOIN_KW JOIN",
                "joinop ::= JOIN_KW nm JOIN",
                "joinop ::= JOIN_KW nm nm JOIN",
                "on_opt ::= ON expr",
                "on_opt ::=",
                "indexed_opt ::=",
                "indexed_opt ::= INDEXED BY nm",
                "indexed_opt ::= NOT INDEXED",
                "using_opt ::= USING LP inscollist RP",
                "using_opt ::=",
                "orderby_opt ::=",
                "orderby_opt ::= ORDER BY sortlist",
                "sortlist ::= sortlist COMMA expr sortorder",
                "sortlist ::= expr sortorder",
                "sortorder ::= ASC",
                "sortorder ::= DESC",
                "sortorder ::=",
                "groupby_opt ::=",
                "groupby_opt ::= GROUP BY nexprlist",
                "having_opt ::=",
                "having_opt ::= HAVING expr",
                "limit_opt ::=",
                "limit_opt ::= LIMIT expr",
                "limit_opt ::= LIMIT expr OFFSET expr",
                "limit_opt ::= LIMIT expr COMMA expr",
                "cmd ::= DELETE FROM fullname indexed_opt where_opt",
                "where_opt ::=",
                "where_opt ::= WHERE expr",
                "cmd ::= UPDATE orconf fullname indexed_opt SET setlist where_opt",
                "setlist ::= setlist COMMA nm EQ expr",
                "setlist ::= nm EQ expr",
                "cmd ::= insert_cmd INTO fullname inscollist_opt valuelist",
                "cmd ::= insert_cmd INTO fullname inscollist_opt select",
                "cmd ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES",
                "insert_cmd ::= INSERT orconf",
                "insert_cmd ::= REPLACE",
                "valuelist ::= VALUES LP nexprlist RP",
                "valuelist ::= valuelist COMMA LP exprlist RP",
                "inscollist_opt ::=",
                "inscollist_opt ::= LP inscollist RP",
                "inscollist ::= inscollist COMMA nm",
                "inscollist ::= nm",
                "expr ::= term",
                "expr ::= LP expr RP",
                "term ::= NULL",
                "expr ::= id",
                "expr ::= JOIN_KW",
                "expr ::= nm DOT nm",
                "expr ::= nm DOT nm DOT nm",
                "term ::= INTEGER|FLOAT|BLOB",
                "term ::= STRING",
                "expr ::= REGISTER",
                "expr ::= VARIABLE",
                "expr ::= expr COLLATE ids",
                "expr ::= CAST LP expr AS typetoken RP",
                "expr ::= ID LP distinct exprlist RP",
                "expr ::= ID LP STAR RP",
                "term ::= CTIME_KW",
                "expr ::= expr AND expr",
                "expr ::= expr OR expr",
                "expr ::= expr LT|GT|GE|LE expr",
                "expr ::= expr EQ|NE expr",
                "expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
                "expr ::= expr PLUS|MINUS expr",
                "expr ::= expr STAR|SLASH|REM expr",
                "expr ::= expr CONCAT expr",
                "likeop ::= LIKE_KW",
                "likeop ::= NOT LIKE_KW",
                "likeop ::= MATCH",
                "likeop ::= NOT MATCH",
                "expr ::= expr likeop expr",
                "expr ::= expr likeop expr ESCAPE expr",
                "expr ::= expr ISNULL|NOTNULL",
                "expr ::= expr NOT NULL",
                "expr ::= expr IS expr",
                "expr ::= expr IS NOT expr",
                "expr ::= NOT expr",
                "expr ::= BITNOT expr",
                "expr ::= MINUS expr",
                "expr ::= PLUS expr",
                "between_op ::= BETWEEN",
                "between_op ::= NOT BETWEEN",
                "expr ::= expr between_op expr AND expr",
                "in_op ::= IN",
                "in_op ::= NOT IN",
                "expr ::= expr in_op LP exprlist RP",
                "expr ::= LP select RP",
                "expr ::= expr in_op LP select RP",
                "expr ::= expr in_op nm dbnm",
                "expr ::= EXISTS LP select RP",
                "expr ::= CASE case_operand case_exprlist case_else END",
                "case_exprlist ::= case_exprlist WHEN expr THEN expr",
                "case_exprlist ::= WHEN expr THEN expr",
                "case_else ::= ELSE expr",
                "case_else ::=",
                "case_operand ::= expr",
                "case_operand ::=",
                "exprlist ::= nexprlist",
                "exprlist ::=",
                "nexprlist ::= nexprlist COMMA expr",
                "nexprlist ::= expr",
                "cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP idxlist RP",
                "uniqueflag ::= UNIQUE",
                "uniqueflag ::=",
                "idxlist_opt ::=",
                "idxlist_opt ::= LP idxlist RP",
                "idxlist ::= idxlist COMMA nm collate sortorder",
                "idxlist ::= nm collate sortorder",
                "collate ::=",
                "collate ::= COLLATE ids",
                "cmd ::= DROP INDEX ifexists fullname",
                "cmd ::= VACUUM",
                "cmd ::= VACUUM nm",
                "cmd ::= PRAGMA nm dbnm",
                "cmd ::= PRAGMA nm dbnm EQ nmnum",
                "cmd ::= PRAGMA nm dbnm LP nmnum RP",
                "cmd ::= PRAGMA nm dbnm EQ minus_num",
                "cmd ::= PRAGMA nm dbnm LP minus_num RP",
                "nmnum ::= plus_num",
                "nmnum ::= nm",
                "nmnum ::= ON",
                "nmnum ::= DELETE",
                "nmnum ::= DEFAULT",
                "plus_num ::= PLUS number",
                "plus_num ::= number",
                "minus_num ::= MINUS number",
                "number ::= INTEGER|FLOAT",
                "cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END",
                "trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON f" +
                    "ullname foreach_clause when_clause",
                "trigger_time ::= BEFORE",
                "trigger_time ::= AFTER",
                "trigger_time ::= INSTEAD OF",
                "trigger_time ::=",
                "trigger_event ::= DELETE|INSERT",
                "trigger_event ::= UPDATE",
                "trigger_event ::= UPDATE OF inscollist",
                "foreach_clause ::=",
                "foreach_clause ::= FOR EACH ROW",
                "when_clause ::=",
                "when_clause ::= WHEN expr",
                "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
                "trigger_cmd_list ::= trigger_cmd SEMI",
                "trnm ::= nm",
                "trnm ::= nm DOT nm",
                "tridxby ::=",
                "tridxby ::= INDEXED BY nm",
                "tridxby ::= NOT INDEXED",
                "trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist where_opt",
                "trigger_cmd ::= insert_cmd INTO trnm inscollist_opt valuelist",
                "trigger_cmd ::= insert_cmd INTO trnm inscollist_opt select",
                "trigger_cmd ::= DELETE FROM trnm tridxby where_opt",
                "trigger_cmd ::= select",
                "expr ::= RAISE LP IGNORE RP",
                "expr ::= RAISE LP raisetype COMMA nm RP",
                "raisetype ::= ROLLBACK",
                "raisetype ::= ABORT",
                "raisetype ::= FAIL",
                "cmd ::= DROP TRIGGER ifexists fullname",
                "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
                "cmd ::= DETACH database_kw_opt expr",
                "key_opt ::=",
                "key_opt ::= KEY expr",
                "database_kw_opt ::= DATABASE",
                "database_kw_opt ::=",
                "cmd ::= REINDEX",
                "cmd ::= REINDEX nm dbnm",
                "cmd ::= ANALYZE",
                "cmd ::= ANALYZE nm dbnm",
                "cmd ::= ALTER TABLE fullname RENAME TO nm",
                "cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt column",
                "add_column_fullname ::= fullname",
                "kwcolumn_opt ::=",
                "kwcolumn_opt ::= COLUMNKW",
                "cmd ::= create_vtab",
                "cmd ::= create_vtab LP vtabarglist RP",
                "create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm",
                "vtabarglist ::= vtabarg",
                "vtabarglist ::= vtabarglist COMMA vtabarg",
                "vtabarg ::=",
                "vtabarg ::= vtabarg vtabargtoken",
                "vtabargtoken ::= ANY",
                "vtabargtoken ::= lp anylist RP",
                "lp ::= LP",
                "anylist ::=",
                "anylist ::= anylist LP anylist RP",
                "anylist ::= anylist ANY"};
        #endregion
        protected static Minor _zeroMinor;
        protected const int ACTIONS = 1564;
        #region Tables: Actions
        protected static ushort[] _actions = new ushort[] {
                309,
                955,
                184,
                417,
                2,
                171,
                624,
                594,
                56,
                56,
                56,
                56,
                49,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                620,
                619,
                298,
                620,
                619,
                234,
                587,
                581,
                56,
                56,
                56,
                56,
                19,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                605,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                541,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                594,
                325,
                196,
                195,
                194,
                33,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                617,
                616,
                165,
                617,
                616,
                380,
                377,
                376,
                407,
                532,
                576,
                576,
                587,
                581,
                303,
                422,
                375,
                59,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                50,
                47,
                146,
                574,
                545,
                65,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                213,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                223,
                539,
                420,
                170,
                176,
                138,
                280,
                383,
                275,
                382,
                168,
                489,
                551,
                409,
                668,
                620,
                619,
                271,
                438,
                409,
                438,
                550,
                604,
                67,
                482,
                507,
                618,
                599,
                412,
                587,
                581,
                600,
                483,
                618,
                412,
                618,
                598,
                91,
                439,
                440,
                439,
                335,
                598,
                73,
                669,
                222,
                266,
                480,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                670,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                279,
                232,
                231,
                1,
                132,
                200,
                385,
                620,
                619,
                617,
                616,
                278,
                435,
                289,
                563,
                175,
                262,
                409,
                264,
                437,
                497,
                436,
                166,
                441,
                568,
                336,
                568,
                201,
                537,
                587,
                581,
                599,
                412,
                165,
                594,
                600,
                380,
                377,
                376,
                597,
                598,
                92,
                523,
                618,
                569,
                569,
                592,
                375,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                597,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                463,
                617,
                616,
                590,
                590,
                590,
                174,
                272,
                396,
                409,
                272,
                409,
                548,
                397,
                620,
                619,
                68,
                326,
                620,
                619,
                620,
                619,
                618,
                546,
                412,
                618,
                412,
                471,
                594,
                587,
                581,
                472,
                598,
                92,
                598,
                92,
                52,
                52,
                52,
                51,
                233,
                513,
                512,
                206,
                322,
                363,
                464,
                221,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                529,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                396,
                409,
                396,
                597,
                372,
                386,
                530,
                347,
                617,
                616,
                575,
                202,
                617,
                616,
                617,
                616,
                412,
                620,
                619,
                145,
                255,
                346,
                254,
                577,
                598,
                74,
                351,
                45,
                489,
                587,
                581,
                235,
                189,
                464,
                544,
                167,
                296,
                187,
                469,
                479,
                67,
                62,
                39,
                618,
                546,
                597,
                345,
                573,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                6,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                562,
                558,
                407,
                528,
                576,
                576,
                344,
                255,
                346,
                254,
                182,
                617,
                616,
                503,
                504,
                314,
                409,
                557,
                235,
                166,
                271,
                409,
                352,
                564,
                181,
                407,
                546,
                576,
                576,
                587,
                581,
                412,
                537,
                556,
                561,
                517,
                412,
                618,
                249,
                598,
                16,
                7,
                36,
                467,
                598,
                92,
                516,
                618,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                541,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                327,
                572,
                571,
                525,
                558,
                560,
                394,
                871,
                246,
                409,
                248,
                171,
                392,
                594,
                219,
                407,
                409,
                576,
                576,
                502,
                557,
                364,
                145,
                510,
                412,
                407,
                229,
                576,
                576,
                587,
                581,
                412,
                598,
                92,
                381,
                269,
                556,
                166,
                400,
                598,
                69,
                501,
                419,
                945,
                199,
                945,
                198,
                546,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                568,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                317,
                419,
                944,
                508,
                944,
                308,
                597,
                594,
                565,
                490,
                212,
                173,
                247,
                423,
                615,
                614,
                613,
                323,
                197,
                143,
                405,
                572,
                571,
                489,
                66,
                50,
                47,
                146,
                594,
                587,
                581,
                232,
                231,
                559,
                427,
                67,
                555,
                15,
                618,
                186,
                543,
                303,
                421,
                35,
                206,
                432,
                423,
                552,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                205,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                569,
                569,
                260,
                268,
                597,
                12,
                373,
                568,
                166,
                409,
                313,
                409,
                420,
                409,
                473,
                473,
                365,
                618,
                50,
                47,
                146,
                597,
                594,
                468,
                412,
                166,
                412,
                351,
                412,
                587,
                581,
                32,
                598,
                94,
                598,
                97,
                598,
                95,
                627,
                625,
                329,
                142,
                50,
                47,
                146,
                333,
                349,
                358,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                409,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                409,
                388,
                412,
                409,
                22,
                565,
                404,
                212,
                362,
                389,
                598,
                104,
                359,
                409,
                156,
                412,
                409,
                603,
                412,
                537,
                331,
                569,
                569,
                598,
                103,
                493,
                598,
                105,
                412,
                587,
                581,
                412,
                260,
                549,
                618,
                11,
                598,
                106,
                521,
                598,
                133,
                169,
                457,
                456,
                170,
                35,
                601,
                618,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                409,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                409,
                259,
                412,
                409,
                50,
                47,
                146,
                357,
                318,
                355,
                598,
                134,
                527,
                352,
                337,
                412,
                409,
                356,
                412,
                357,
                409,
                357,
                618,
                598,
                98,
                129,
                598,
                102,
                618,
                587,
                581,
                412,
                21,
                235,
                618,
                412,
                618,
                211,
                143,
                598,
                101,
                30,
                167,
                598,
                93,
                350,
                535,
                203,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                409,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                409,
                526,
                412,
                409,
                425,
                215,
                305,
                597,
                551,
                141,
                598,
                100,
                40,
                409,
                38,
                412,
                409,
                550,
                412,
                409,
                228,
                220,
                314,
                598,
                77,
                500,
                598,
                96,
                412,
                587,
                581,
                412,
                338,
                253,
                412,
                218,
                598,
                137,
                379,
                598,
                136,
                28,
                598,
                135,
                270,
                715,
                210,
                481,
                57,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                409,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                409,
                272,
                412,
                409,
                315,
                147,
                597,
                272,
                626,
                2,
                598,
                76,
                209,
                409,
                127,
                412,
                618,
                126,
                412,
                409,
                621,
                235,
                618,
                598,
                90,
                374,
                598,
                89,
                412,
                587,
                581,
                27,
                260,
                350,
                412,
                618,
                598,
                75,
                321,
                541,
                541,
                125,
                598,
                88,
                320,
                278,
                597,
                618,
                57,
                46,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                409,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                409,
                450,
                412,
                164,
                284,
                282,
                272,
                609,
                424,
                304,
                598,
                87,
                370,
                409,
                477,
                412,
                409,
                608,
                409,
                607,
                602,
                618,
                618,
                598,
                99,
                586,
                585,
                122,
                412,
                587,
                581,
                412,
                618,
                412,
                618,
                618,
                598,
                86,
                366,
                598,
                17,
                598,
                85,
                319,
                185,
                519,
                518,
                583,
                582,
                58,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                409,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                309,
                584,
                409,
                412,
                409,
                260,
                260,
                260,
                408,
                591,
                474,
                598,
                84,
                170,
                409,
                466,
                518,
                412,
                121,
                412,
                618,
                618,
                618,
                618,
                618,
                598,
                83,
                598,
                72,
                412,
                587,
                581,
                51,
                233,
                625,
                329,
                470,
                598,
                71,
                257,
                159,
                120,
                14,
                462,
                157,
                158,
                117,
                260,
                448,
                447,
                446,
                48,
                579,
                578,
                580,
                580,
                55,
                55,
                56,
                56,
                56,
                56,
                618,
                54,
                54,
                54,
                54,
                53,
                53,
                52,
                52,
                52,
                51,
                233,
                44,
                403,
                260,
                3,
                409,
                459,
                260,
                413,
                619,
                118,
                398,
                10,
                25,
                24,
                554,
                348,
                217,
                618,
                406,
                412,
                409,
                618,
                4,
                44,
                403,
                618,
                3,
                598,
                82,
                618,
                413,
                619,
                455,
                542,
                115,
                412,
                538,
                401,
                536,
                274,
                506,
                406,
                251,
                598,
                81,
                216,
                273,
                563,
                618,
                243,
                453,
                618,
                154,
                618,
                618,
                618,
                449,
                416,
                623,
                110,
                401,
                618,
                409,
                236,
                64,
                123,
                487,
                41,
                42,
                531,
                563,
                204,
                409,
                267,
                43,
                411,
                410,
                412,
                265,
                592,
                108,
                618,
                107,
                434,
                332,
                598,
                80,
                412,
                618,
                263,
                41,
                42,
                443,
                618,
                409,
                598,
                70,
                43,
                411,
                410,
                433,
                261,
                592,
                149,
                618,
                597,
                256,
                237,
                188,
                412,
                590,
                590,
                590,
                589,
                588,
                13,
                618,
                598,
                18,
                328,
                235,
                618,
                44,
                403,
                360,
                3,
                418,
                461,
                339,
                413,
                619,
                227,
                124,
                590,
                590,
                590,
                589,
                588,
                13,
                618,
                406,
                409,
                618,
                409,
                139,
                34,
                403,
                387,
                3,
                148,
                622,
                312,
                413,
                619,
                311,
                330,
                412,
                460,
                412,
                401,
                180,
                353,
                412,
                406,
                598,
                79,
                598,
                78,
                250,
                563,
                598,
                9,
                618,
                612,
                611,
                610,
                618,
                8,
                452,
                442,
                242,
                415,
                401,
                618,
                239,
                235,
                179,
                238,
                428,
                41,
                42,
                288,
                563,
                618,
                618,
                618,
                43,
                411,
                410,
                618,
                144,
                592,
                618,
                618,
                177,
                61,
                618,
                596,
                391,
                620,
                619,
                287,
                41,
                42,
                414,
                618,
                293,
                30,
                393,
                43,
                411,
                410,
                292,
                618,
                592,
                31,
                618,
                395,
                291,
                60,
                230,
                37,
                590,
                590,
                590,
                589,
                588,
                13,
                214,
                553,
                183,
                290,
                172,
                301,
                300,
                299,
                178,
                297,
                595,
                563,
                451,
                29,
                285,
                390,
                540,
                590,
                590,
                590,
                589,
                588,
                13,
                283,
                520,
                534,
                150,
                533,
                241,
                281,
                384,
                192,
                191,
                324,
                515,
                514,
                276,
                240,
                510,
                523,
                307,
                511,
                128,
                592,
                509,
                225,
                226,
                486,
                485,
                224,
                152,
                491,
                464,
                306,
                484,
                163,
                153,
                371,
                478,
                151,
                162,
                258,
                369,
                161,
                367,
                208,
                475,
                476,
                26,
                160,
                465,
                140,
                361,
                131,
                590,
                590,
                590,
                116,
                119,
                454,
                343,
                155,
                114,
                342,
                113,
                112,
                445,
                111,
                130,
                109,
                431,
                316,
                426,
                430,
                23,
                429,
                20,
                606,
                190,
                507,
                255,
                341,
                244,
                63,
                294,
                593,
                310,
                570,
                277,
                402,
                354,
                235,
                567,
                496,
                495,
                492,
                494,
                302,
                458,
                378,
                286,
                245,
                566,
                5,
                252,
                547,
                193,
                444,
                233,
                340,
                207,
                524,
                368,
                505,
                334,
                522,
                499,
                399,
                295,
                498,
                956,
                488};
        #endregion
        protected const int NO_ACTION = 956;
        protected const int ACCEPT_ACTION = 955;
        protected const int ERROR_ACTION = 954;
        #region Tables: Lookaheads
        protected static byte[] _lookaheads = new byte[] {
                19,
                142,
                143,
                144,
                145,
                24,
                1,
                26,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                26,
                27,
                15,
                26,
                27,
                197,
                49,
                50,
                77,
                78,
                79,
                80,
                204,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                23,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                166,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                94,
                19,
                105,
                106,
                107,
                25,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                94,
                95,
                96,
                94,
                95,
                99,
                100,
                101,
                112,
                205,
                114,
                115,
                49,
                50,
                22,
                23,
                110,
                54,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                221,
                222,
                223,
                23,
                120,
                25,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                22,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                92,
                23,
                67,
                25,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                150,
                32,
                150,
                118,
                26,
                27,
                109,
                150,
                150,
                150,
                41,
                161,
                162,
                180,
                181,
                165,
                113,
                165,
                49,
                50,
                117,
                188,
                165,
                165,
                165,
                173,
                174,
                170,
                171,
                170,
                171,
                173,
                174,
                118,
                184,
                16,
                186,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                118,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                98,
                86,
                87,
                22,
                24,
                160,
                88,
                26,
                27,
                94,
                95,
                109,
                97,
                224,
                66,
                118,
                60,
                150,
                62,
                104,
                23,
                106,
                25,
                229,
                230,
                229,
                230,
                160,
                150,
                49,
                50,
                113,
                165,
                96,
                26,
                117,
                99,
                100,
                101,
                194,
                173,
                174,
                94,
                165,
                129,
                130,
                98,
                110,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                194,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                11,
                94,
                95,
                129,
                130,
                131,
                118,
                150,
                215,
                150,
                150,
                150,
                25,
                220,
                26,
                27,
                22,
                213,
                26,
                27,
                26,
                27,
                165,
                25,
                165,
                165,
                165,
                30,
                94,
                49,
                50,
                34,
                173,
                174,
                173,
                174,
                88,
                89,
                90,
                91,
                92,
                7,
                8,
                160,
                187,
                48,
                57,
                187,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                23,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                215,
                150,
                215,
                194,
                19,
                220,
                88,
                220,
                94,
                95,
                23,
                160,
                94,
                95,
                94,
                95,
                165,
                26,
                27,
                95,
                105,
                106,
                107,
                113,
                173,
                174,
                217,
                22,
                150,
                49,
                50,
                116,
                119,
                57,
                120,
                50,
                158,
                22,
                21,
                161,
                162,
                232,
                136,
                165,
                120,
                194,
                237,
                23,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                22,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                23,
                12,
                112,
                23,
                114,
                115,
                63,
                105,
                106,
                107,
                23,
                94,
                95,
                97,
                98,
                104,
                150,
                28,
                116,
                25,
                109,
                150,
                150,
                23,
                23,
                112,
                25,
                114,
                115,
                49,
                50,
                165,
                150,
                44,
                11,
                46,
                165,
                165,
                16,
                173,
                174,
                76,
                136,
                100,
                173,
                174,
                57,
                165,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                166,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                169,
                170,
                171,
                23,
                12,
                23,
                214,
                138,
                60,
                150,
                62,
                24,
                215,
                26,
                216,
                112,
                150,
                114,
                115,
                36,
                28,
                213,
                95,
                103,
                165,
                112,
                205,
                114,
                115,
                49,
                50,
                165,
                173,
                174,
                51,
                23,
                44,
                25,
                46,
                173,
                174,
                58,
                22,
                23,
                22,
                25,
                160,
                120,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                230,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                215,
                22,
                23,
                23,
                25,
                163,
                194,
                94,
                166,
                167,
                168,
                25,
                138,
                67,
                7,
                8,
                9,
                108,
                206,
                207,
                169,
                170,
                171,
                150,
                22,
                221,
                222,
                223,
                26,
                49,
                50,
                86,
                87,
                23,
                161,
                162,
                23,
                22,
                165,
                24,
                120,
                22,
                23,
                25,
                160,
                241,
                67,
                176,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                160,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                129,
                130,
                150,
                23,
                194,
                35,
                23,
                230,
                25,
                150,
                155,
                150,
                67,
                150,
                105,
                106,
                107,
                165,
                221,
                222,
                223,
                194,
                94,
                23,
                165,
                25,
                165,
                217,
                165,
                49,
                50,
                25,
                173,
                174,
                173,
                174,
                173,
                174,
                0,
                1,
                2,
                118,
                221,
                222,
                223,
                193,
                219,
                237,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                150,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                150,
                19,
                165,
                150,
                24,
                166,
                167,
                168,
                227,
                27,
                173,
                174,
                231,
                150,
                25,
                165,
                150,
                172,
                165,
                150,
                242,
                129,
                130,
                173,
                174,
                180,
                173,
                174,
                165,
                49,
                50,
                165,
                150,
                176,
                165,
                35,
                173,
                174,
                165,
                173,
                174,
                35,
                23,
                23,
                25,
                25,
                173,
                165,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                150,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                150,
                193,
                165,
                150,
                221,
                222,
                223,
                150,
                213,
                19,
                173,
                174,
                23,
                150,
                97,
                165,
                150,
                27,
                165,
                150,
                150,
                150,
                165,
                173,
                174,
                22,
                173,
                174,
                165,
                49,
                50,
                165,
                52,
                116,
                165,
                165,
                165,
                206,
                207,
                173,
                174,
                126,
                50,
                173,
                174,
                128,
                27,
                160,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                150,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                150,
                23,
                165,
                150,
                23,
                216,
                25,
                194,
                32,
                39,
                173,
                174,
                135,
                150,
                137,
                165,
                150,
                41,
                165,
                150,
                52,
                238,
                104,
                173,
                174,
                29,
                173,
                174,
                165,
                49,
                50,
                165,
                219,
                238,
                165,
                238,
                173,
                174,
                52,
                173,
                174,
                22,
                173,
                174,
                23,
                23,
                160,
                25,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                150,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                150,
                150,
                165,
                150,
                245,
                246,
                194,
                150,
                144,
                145,
                173,
                174,
                160,
                150,
                22,
                165,
                165,
                22,
                165,
                150,
                150,
                116,
                165,
                173,
                174,
                52,
                173,
                174,
                165,
                49,
                50,
                22,
                150,
                128,
                165,
                165,
                173,
                174,
                187,
                166,
                166,
                22,
                173,
                174,
                187,
                109,
                194,
                165,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                150,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                150,
                193,
                165,
                102,
                205,
                205,
                150,
                150,
                247,
                248,
                173,
                174,
                19,
                150,
                20,
                165,
                150,
                150,
                150,
                150,
                150,
                165,
                165,
                173,
                174,
                49,
                50,
                104,
                165,
                49,
                50,
                165,
                165,
                165,
                165,
                165,
                173,
                174,
                43,
                173,
                174,
                173,
                174,
                187,
                24,
                190,
                191,
                71,
                72,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                150,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                98,
                150,
                165,
                150,
                150,
                150,
                150,
                150,
                150,
                59,
                173,
                174,
                25,
                150,
                190,
                191,
                165,
                53,
                165,
                165,
                165,
                165,
                165,
                165,
                173,
                174,
                173,
                174,
                165,
                49,
                50,
                91,
                92,
                1,
                2,
                53,
                173,
                174,
                138,
                104,
                22,
                5,
                1,
                35,
                118,
                127,
                150,
                193,
                193,
                193,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                165,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                19,
                20,
                150,
                22,
                150,
                27,
                150,
                26,
                27,
                108,
                150,
                22,
                76,
                76,
                150,
                25,
                193,
                165,
                37,
                165,
                150,
                165,
                22,
                19,
                20,
                165,
                22,
                173,
                174,
                165,
                26,
                27,
                23,
                150,
                119,
                165,
                150,
                56,
                150,
                150,
                150,
                37,
                16,
                173,
                174,
                193,
                150,
                66,
                165,
                193,
                1,
                165,
                121,
                165,
                165,
                165,
                20,
                146,
                147,
                119,
                56,
                165,
                150,
                152,
                16,
                154,
                150,
                86,
                87,
                88,
                66,
                160,
                150,
                150,
                93,
                94,
                95,
                165,
                150,
                98,
                108,
                165,
                127,
                23,
                65,
                173,
                174,
                165,
                165,
                150,
                86,
                87,
                128,
                165,
                150,
                173,
                174,
                93,
                94,
                95,
                23,
                150,
                98,
                15,
                165,
                194,
                150,
                140,
                22,
                165,
                129,
                130,
                131,
                132,
                133,
                134,
                165,
                173,
                174,
                3,
                116,
                165,
                19,
                20,
                150,
                22,
                4,
                150,
                217,
                26,
                27,
                179,
                179,
                129,
                130,
                131,
                132,
                133,
                134,
                165,
                37,
                150,
                165,
                150,
                164,
                19,
                20,
                150,
                22,
                246,
                149,
                249,
                26,
                27,
                249,
                244,
                165,
                150,
                165,
                56,
                6,
                150,
                165,
                37,
                173,
                174,
                173,
                174,
                150,
                66,
                173,
                174,
                165,
                149,
                149,
                13,
                165,
                25,
                150,
                150,
                150,
                149,
                56,
                165,
                150,
                116,
                151,
                150,
                150,
                86,
                87,
                150,
                66,
                165,
                165,
                165,
                93,
                94,
                95,
                165,
                150,
                98,
                165,
                165,
                151,
                22,
                165,
                194,
                150,
                26,
                27,
                150,
                86,
                87,
                159,
                165,
                199,
                126,
                123,
                93,
                94,
                95,
                200,
                165,
                98,
                124,
                165,
                122,
                201,
                125,
                225,
                135,
                129,
                130,
                131,
                132,
                133,
                134,
                5,
                157,
                157,
                202,
                118,
                10,
                11,
                12,
                13,
                14,
                203,
                66,
                17,
                104,
                210,
                121,
                211,
                129,
                130,
                131,
                132,
                133,
                134,
                210,
                175,
                211,
                31,
                211,
                33,
                210,
                104,
                86,
                87,
                47,
                175,
                183,
                175,
                42,
                103,
                94,
                178,
                177,
                22,
                98,
                175,
                92,
                228,
                175,
                175,
                228,
                55,
                183,
                57,
                178,
                175,
                156,
                61,
                18,
                157,
                64,
                156,
                235,
                157,
                156,
                45,
                157,
                236,
                157,
                135,
                156,
                189,
                68,
                157,
                218,
                129,
                130,
                131,
                22,
                189,
                199,
                157,
                156,
                192,
                18,
                192,
                192,
                199,
                192,
                218,
                189,
                40,
                157,
                38,
                157,
                240,
                157,
                240,
                153,
                196,
                181,
                105,
                106,
                107,
                243,
                198,
                166,
                111,
                230,
                176,
                226,
                239,
                116,
                230,
                176,
                166,
                166,
                176,
                148,
                199,
                177,
                209,
                209,
                166,
                196,
                239,
                208,
                185,
                199,
                92,
                209,
                233,
                173,
                234,
                182,
                139,
                173,
                182,
                191,
                195,
                182,
                250,
                186};
        #endregion
        protected const int SHIFT_USE_DFLT = -70;
        protected const int SHIFT_COUNT = 416;
        protected const int SHIFT_MIN = -69;
        protected const int SHIFT_MAX = 1487;
        #region Tables: Shift Offsets
        protected static short[] _shift_ofsts = new short[] {
                1143,
                1188,
                1417,
                1188,
                1287,
                1287,
                138,
                138,
                -2,
                -19,
                1287,
                1287,
                1287,
                1287,
                347,
                362,
                129,
                129,
                795,
                1165,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1310,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                1287,
                286,
                362,
                362,
                538,
                538,
                231,
                1253,
                55,
                721,
                647,
                573,
                499,
                425,
                351,
                277,
                203,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                869,
                943,
                869,
                1017,
                1091,
                1091,
                -69,
                -45,
                -45,
                -45,
                -45,
                -45,
                -1,
                24,
                245,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                388,
                356,
                362,
                362,
                362,
                362,
                362,
                732,
                868,
                231,
                1051,
                1458,
                -70,
                -70,
                -70,
                1367,
                57,
                434,
                434,
                289,
                291,
                285,
                1,
                204,
                572,
                539,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                362,
                506,
                506,
                506,
                705,
                1253,
                1253,
                1253,
                -70,
                -70,
                -70,
                171,
                171,
                160,
                502,
                502,
                502,
                446,
                432,
                511,
                422,
                358,
                335,
                -12,
                -12,
                -12,
                -12,
                576,
                294,
                -12,
                -12,
                295,
                595,
                141,
                600,
                730,
                723,
                723,
                805,
                730,
                805,
                439,
                911,
                231,
                865,
                231,
                865,
                807,
                865,
                723,
                766,
                633,
                633,
                231,
                284,
                63,
                608,
                1476,
                1308,
                1308,
                1472,
                1472,
                1308,
                1477,
                1425,
                1275,
                1487,
                1487,
                1487,
                1487,
                1308,
                1461,
                1275,
                1477,
                1425,
                1425,
                1308,
                1461,
                1355,
                1441,
                1308,
                1308,
                1461,
                1308,
                1461,
                1308,
                1461,
                1442,
                1348,
                1348,
                1348,
                1408,
                1375,
                1375,
                1442,
                1348,
                1357,
                1348,
                1408,
                1348,
                1348,
                1316,
                1331,
                1316,
                1331,
                1316,
                1331,
                1308,
                1308,
                1280,
                1288,
                1289,
                1285,
                1279,
                1275,
                1253,
                1336,
                1346,
                1346,
                1338,
                1338,
                1338,
                1338,
                -70,
                -70,
                -70,
                -70,
                -70,
                -70,
                1013,
                467,
                612,
                84,
                179,
                -28,
                870,
                410,
                761,
                760,
                667,
                650,
                531,
                220,
                361,
                331,
                125,
                127,
                97,
                1306,
                1300,
                1270,
                1151,
                1272,
                1203,
                1232,
                1261,
                1244,
                1148,
                1174,
                1139,
                1156,
                1124,
                1220,
                1115,
                1210,
                1233,
                1099,
                1193,
                1184,
                1174,
                1173,
                1029,
                1121,
                1120,
                1085,
                1162,
                1119,
                1037,
                1152,
                1147,
                1129,
                1046,
                1011,
                1093,
                1098,
                1075,
                1061,
                1032,
                960,
                1057,
                1031,
                1030,
                899,
                938,
                982,
                936,
                972,
                958,
                910,
                955,
                875,
                885,
                908,
                857,
                859,
                867,
                804,
                590,
                834,
                747,
                818,
                513,
                611,
                741,
                673,
                637,
                611,
                606,
                603,
                579,
                501,
                541,
                468,
                386,
                445,
                395,
                376,
                281,
                185,
                120,
                92,
                75,
                45,
                114,
                25,
                11,
                5};
        #endregion
        protected const int REDUCE_USE_DFLT = -169;
        protected const int REDUCE_COUNT = 308;
        protected const int REDUCE_MIN = -168;
        protected const int REDUCE_MAX = 1391;
        #region Tables: Reduce Offsets
        protected static short[] _reduce_ofsts = new short[] {
                -141,
                90,
                1095,
                222,
                158,
                156,
                19,
                17,
                10,
                -104,
                378,
                316,
                311,
                12,
                180,
                249,
                598,
                464,
                397,
                1181,
                1177,
                1175,
                1128,
                1106,
                1096,
                1054,
                1038,
                974,
                964,
                962,
                948,
                905,
                903,
                900,
                887,
                874,
                832,
                826,
                816,
                813,
                800,
                758,
                755,
                752,
                742,
                739,
                726,
                685,
                681,
                668,
                665,
                652,
                607,
                604,
                594,
                591,
                578,
                530,
                528,
                526,
                385,
                18,
                477,
                466,
                519,
                444,
                350,
                435,
                405,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                488,
                1040,
                678,
                1036,
                1007,
                967,
                966,
                965,
                845,
                686,
                610,
                684,
                317,
                672,
                893,
                327,
                623,
                522,
                -7,
                820,
                814,
                157,
                154,
                101,
                702,
                494,
                580,
                488,
                488,
                488,
                488,
                488,
                614,
                586,
                935,
                892,
                968,
                1245,
                1242,
                1234,
                1225,
                798,
                798,
                1222,
                1221,
                1218,
                1214,
                1213,
                1212,
                1202,
                1195,
                1191,
                1161,
                1158,
                1140,
                1135,
                1123,
                1112,
                1107,
                1100,
                1080,
                1074,
                1073,
                1072,
                1070,
                1067,
                1048,
                1044,
                969,
                968,
                907,
                906,
                904,
                894,
                833,
                837,
                836,
                340,
                827,
                815,
                775,
                68,
                722,
                646,
                -168,
                1384,
                1380,
                1377,
                1379,
                1376,
                1373,
                1339,
                1365,
                1368,
                1365,
                1365,
                1365,
                1365,
                1365,
                1365,
                1365,
                1320,
                1319,
                1365,
                1365,
                1339,
                1378,
                1349,
                1391,
                1350,
                1342,
                1334,
                1307,
                1341,
                1293,
                1364,
                1363,
                1371,
                1362,
                1370,
                1359,
                1340,
                1354,
                1333,
                1305,
                1304,
                1299,
                1361,
                1328,
                1324,
                1366,
                1282,
                1360,
                1358,
                1278,
                1276,
                1356,
                1292,
                1322,
                1309,
                1317,
                1315,
                1314,
                1312,
                1345,
                1347,
                1302,
                1277,
                1311,
                1303,
                1337,
                1335,
                1252,
                1248,
                1332,
                1330,
                1329,
                1327,
                1326,
                1323,
                1321,
                1297,
                1301,
                1295,
                1294,
                1290,
                1243,
                1240,
                1284,
                1291,
                1286,
                1283,
                1274,
                1281,
                1271,
                1238,
                1241,
                1236,
                1235,
                1227,
                1226,
                1267,
                1266,
                1189,
                1229,
                1223,
                1211,
                1206,
                1201,
                1197,
                1239,
                1237,
                1219,
                1216,
                1209,
                1208,
                1185,
                1089,
                1086,
                1087,
                1137,
                1136,
                1164};
        #endregion
        #region Tables: Defaults
        protected static ushort[] _defaults = new ushort[] {
                632,
                866,
                954,
                954,
                866,
                866,
                954,
                954,
                954,
                756,
                954,
                954,
                954,
                864,
                954,
                954,
                784,
                784,
                928,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                671,
                760,
                790,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                927,
                929,
                798,
                797,
                907,
                771,
                795,
                788,
                792,
                867,
                860,
                861,
                859,
                863,
                868,
                954,
                791,
                827,
                844,
                826,
                838,
                843,
                850,
                842,
                839,
                829,
                828,
                830,
                831,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                658,
                725,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                832,
                833,
                847,
                846,
                845,
                954,
                663,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                934,
                932,
                954,
                879,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                638,
                756,
                756,
                756,
                632,
                954,
                954,
                954,
                946,
                760,
                750,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                800,
                739,
                917,
                919,
                954,
                900,
                737,
                660,
                758,
                673,
                748,
                640,
                794,
                773,
                773,
                912,
                794,
                912,
                696,
                719,
                954,
                784,
                954,
                784,
                693,
                784,
                773,
                862,
                954,
                954,
                954,
                757,
                748,
                954,
                939,
                764,
                764,
                931,
                931,
                764,
                806,
                729,
                794,
                736,
                736,
                736,
                736,
                764,
                655,
                794,
                806,
                729,
                729,
                764,
                655,
                906,
                904,
                764,
                764,
                655,
                764,
                655,
                764,
                655,
                872,
                727,
                727,
                727,
                711,
                876,
                876,
                872,
                727,
                696,
                727,
                711,
                727,
                727,
                777,
                772,
                777,
                772,
                777,
                772,
                764,
                764,
                954,
                789,
                778,
                787,
                785,
                794,
                954,
                714,
                648,
                648,
                637,
                637,
                637,
                637,
                951,
                951,
                946,
                698,
                698,
                681,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                881,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                633,
                941,
                954,
                954,
                938,
                954,
                954,
                954,
                954,
                799,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                916,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                910,
                954,
                954,
                954,
                954,
                954,
                954,
                903,
                902,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                786,
                954,
                779,
                954,
                865,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                954,
                742,
                815,
                954,
                814,
                818,
                813,
                665,
                954,
                646,
                954,
                629,
                634,
                950,
                953,
                952,
                949,
                948,
                947,
                942,
                940,
                937,
                936,
                935,
                933,
                930,
                926,
                885,
                883,
                890,
                889,
                888,
                887,
                886,
                884,
                882,
                880,
                801,
                796,
                793,
                925,
                878,
                738,
                735,
                734,
                654,
                943,
                909,
                918,
                805,
                804,
                807,
                915,
                914,
                913,
                911,
                908,
                895,
                803,
                802,
                730,
                870,
                869,
                657,
                899,
                898,
                897,
                901,
                905,
                896,
                766,
                656,
                653,
                662,
                717,
                718,
                726,
                724,
                723,
                722,
                721,
                720,
                716,
                664,
                672,
                710,
                695,
                694,
                875,
                877,
                874,
                873,
                703,
                702,
                708,
                707,
                706,
                705,
                704,
                701,
                700,
                699,
                692,
                691,
                697,
                690,
                713,
                712,
                709,
                689,
                733,
                732,
                731,
                728,
                688,
                687,
                686,
                818,
                685,
                684,
                824,
                823,
                811,
                854,
                753,
                752,
                751,
                763,
                762,
                775,
                774,
                809,
                808,
                776,
                761,
                755,
                754,
                770,
                769,
                768,
                767,
                759,
                749,
                781,
                783,
                782,
                780,
                856,
                765,
                853,
                924,
                923,
                922,
                921,
                920,
                858,
                857,
                825,
                822,
                676,
                677,
                893,
                892,
                894,
                891,
                679,
                678,
                675,
                674,
                855,
                744,
                743,
                851,
                848,
                840,
                836,
                852,
                849,
                841,
                837,
                835,
                834,
                820,
                819,
                817,
                816,
                812,
                821,
                667,
                745,
                741,
                740,
                810,
                747,
                746,
                683,
                682,
                680,
                661,
                659,
                652,
                650,
                649,
                651,
                647,
                645,
                644,
                643,
                642,
                641,
                670,
                669,
                668,
                666,
                665,
                639,
                636,
                635,
                631,
                630,
                628};
        #endregion
        #region Tables: Fallbacks
        protected static byte[] _fallbacks = new byte[] {
                default(byte),
                default(byte),
                26,
                26,
                26,
                26,
                default(byte),
                26,
                26,
                26,
                default(byte),
                26,
                26,
                26,
                26,
                default(byte),
                default(byte),
                default(byte),
                26,
                default(byte),
                default(byte),
                26,
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                default(byte),
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26,
                26};
        #endregion
        // Index of top element in stack
        protected int _idx = -1;
        // Shifts left before out of the error
        protected int _errors;
        // A place to hold %extra_argument
        private Parse  _pParse;
        // The parser's stack
        protected StackEntry[] _stack = new StackEntry[100];
        #region Tables: Rule Infos
        protected static RuleInfo[] _ruleInfos = new RuleInfo[] {
                new RuleInfo(142, 1),
                new RuleInfo(143, 2),
                new RuleInfo(143, 1),
                new RuleInfo(144, 1),
                new RuleInfo(144, 3),
                new RuleInfo(145, 0),
                new RuleInfo(145, 1),
                new RuleInfo(145, 3),
                new RuleInfo(146, 1),
                new RuleInfo(147, 3),
                new RuleInfo(149, 0),
                new RuleInfo(149, 1),
                new RuleInfo(149, 2),
                new RuleInfo(148, 0),
                new RuleInfo(148, 1),
                new RuleInfo(148, 1),
                new RuleInfo(148, 1),
                new RuleInfo(147, 2),
                new RuleInfo(147, 2),
                new RuleInfo(147, 2),
                new RuleInfo(151, 1),
                new RuleInfo(151, 0),
                new RuleInfo(147, 2),
                new RuleInfo(147, 3),
                new RuleInfo(147, 5),
                new RuleInfo(147, 2),
                new RuleInfo(152, 6),
                new RuleInfo(154, 1),
                new RuleInfo(156, 0),
                new RuleInfo(156, 3),
                new RuleInfo(155, 1),
                new RuleInfo(155, 0),
                new RuleInfo(153, 4),
                new RuleInfo(153, 2),
                new RuleInfo(158, 3),
                new RuleInfo(158, 1),
                new RuleInfo(161, 3),
                new RuleInfo(162, 1),
                new RuleInfo(165, 1),
                new RuleInfo(165, 1),
                new RuleInfo(166, 1),
                new RuleInfo(150, 1),
                new RuleInfo(150, 1),
                new RuleInfo(150, 1),
                new RuleInfo(163, 0),
                new RuleInfo(163, 1),
                new RuleInfo(167, 1),
                new RuleInfo(167, 4),
                new RuleInfo(167, 6),
                new RuleInfo(168, 1),
                new RuleInfo(168, 2),
                new RuleInfo(169, 1),
                new RuleInfo(169, 1),
                new RuleInfo(164, 2),
                new RuleInfo(164, 0),
                new RuleInfo(172, 2),
                new RuleInfo(172, 2),
                new RuleInfo(172, 4),
                new RuleInfo(172, 3),
                new RuleInfo(172, 3),
                new RuleInfo(172, 2),
                new RuleInfo(172, 2),
                new RuleInfo(172, 3),
                new RuleInfo(172, 5),
                new RuleInfo(172, 2),
                new RuleInfo(172, 4),
                new RuleInfo(172, 4),
                new RuleInfo(172, 1),
                new RuleInfo(172, 2),
                new RuleInfo(177, 0),
                new RuleInfo(177, 1),
                new RuleInfo(179, 0),
                new RuleInfo(179, 2),
                new RuleInfo(181, 2),
                new RuleInfo(181, 3),
                new RuleInfo(181, 3),
                new RuleInfo(181, 3),
                new RuleInfo(182, 2),
                new RuleInfo(182, 2),
                new RuleInfo(182, 1),
                new RuleInfo(182, 1),
                new RuleInfo(182, 2),
                new RuleInfo(180, 3),
                new RuleInfo(180, 2),
                new RuleInfo(183, 0),
                new RuleInfo(183, 2),
                new RuleInfo(183, 2),
                new RuleInfo(159, 0),
                new RuleInfo(159, 2),
                new RuleInfo(184, 3),
                new RuleInfo(184, 1),
                new RuleInfo(185, 1),
                new RuleInfo(185, 0),
                new RuleInfo(186, 2),
                new RuleInfo(186, 7),
                new RuleInfo(186, 5),
                new RuleInfo(186, 5),
                new RuleInfo(186, 10),
                new RuleInfo(188, 0),
                new RuleInfo(188, 1),
                new RuleInfo(175, 0),
                new RuleInfo(175, 3),
                new RuleInfo(189, 0),
                new RuleInfo(189, 2),
                new RuleInfo(190, 1),
                new RuleInfo(190, 1),
                new RuleInfo(190, 1),
                new RuleInfo(147, 4),
                new RuleInfo(192, 2),
                new RuleInfo(192, 0),
                new RuleInfo(147, 8),
                new RuleInfo(147, 4),
                new RuleInfo(147, 1),
                new RuleInfo(160, 1),
                new RuleInfo(160, 3),
                new RuleInfo(195, 1),
                new RuleInfo(195, 2),
                new RuleInfo(195, 1),
                new RuleInfo(194, 9),
                new RuleInfo(196, 1),
                new RuleInfo(196, 1),
                new RuleInfo(196, 0),
                new RuleInfo(204, 2),
                new RuleInfo(204, 0),
                new RuleInfo(197, 3),
                new RuleInfo(197, 2),
                new RuleInfo(197, 4),
                new RuleInfo(205, 2),
                new RuleInfo(205, 1),
                new RuleInfo(205, 0),
                new RuleInfo(198, 0),
                new RuleInfo(198, 2),
                new RuleInfo(207, 2),
                new RuleInfo(207, 0),
                new RuleInfo(206, 7),
                new RuleInfo(206, 7),
                new RuleInfo(206, 7),
                new RuleInfo(157, 0),
                new RuleInfo(157, 2),
                new RuleInfo(193, 2),
                new RuleInfo(208, 1),
                new RuleInfo(208, 2),
                new RuleInfo(208, 3),
                new RuleInfo(208, 4),
                new RuleInfo(210, 2),
                new RuleInfo(210, 0),
                new RuleInfo(209, 0),
                new RuleInfo(209, 3),
                new RuleInfo(209, 2),
                new RuleInfo(211, 4),
                new RuleInfo(211, 0),
                new RuleInfo(202, 0),
                new RuleInfo(202, 3),
                new RuleInfo(214, 4),
                new RuleInfo(214, 2),
                new RuleInfo(176, 1),
                new RuleInfo(176, 1),
                new RuleInfo(176, 0),
                new RuleInfo(200, 0),
                new RuleInfo(200, 3),
                new RuleInfo(201, 0),
                new RuleInfo(201, 2),
                new RuleInfo(203, 0),
                new RuleInfo(203, 2),
                new RuleInfo(203, 4),
                new RuleInfo(203, 4),
                new RuleInfo(147, 5),
                new RuleInfo(199, 0),
                new RuleInfo(199, 2),
                new RuleInfo(147, 7),
                new RuleInfo(216, 5),
                new RuleInfo(216, 3),
                new RuleInfo(147, 5),
                new RuleInfo(147, 5),
                new RuleInfo(147, 6),
                new RuleInfo(217, 2),
                new RuleInfo(217, 1),
                new RuleInfo(219, 4),
                new RuleInfo(219, 5),
                new RuleInfo(218, 0),
                new RuleInfo(218, 3),
                new RuleInfo(213, 3),
                new RuleInfo(213, 1),
                new RuleInfo(174, 1),
                new RuleInfo(174, 3),
                new RuleInfo(173, 1),
                new RuleInfo(174, 1),
                new RuleInfo(174, 1),
                new RuleInfo(174, 3),
                new RuleInfo(174, 5),
                new RuleInfo(173, 1),
                new RuleInfo(173, 1),
                new RuleInfo(174, 1),
                new RuleInfo(174, 1),
                new RuleInfo(174, 3),
                new RuleInfo(174, 6),
                new RuleInfo(174, 5),
                new RuleInfo(174, 4),
                new RuleInfo(173, 1),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(221, 1),
                new RuleInfo(221, 2),
                new RuleInfo(221, 1),
                new RuleInfo(221, 2),
                new RuleInfo(174, 3),
                new RuleInfo(174, 5),
                new RuleInfo(174, 2),
                new RuleInfo(174, 3),
                new RuleInfo(174, 3),
                new RuleInfo(174, 4),
                new RuleInfo(174, 2),
                new RuleInfo(174, 2),
                new RuleInfo(174, 2),
                new RuleInfo(174, 2),
                new RuleInfo(222, 1),
                new RuleInfo(222, 2),
                new RuleInfo(174, 5),
                new RuleInfo(223, 1),
                new RuleInfo(223, 2),
                new RuleInfo(174, 5),
                new RuleInfo(174, 3),
                new RuleInfo(174, 5),
                new RuleInfo(174, 4),
                new RuleInfo(174, 4),
                new RuleInfo(174, 5),
                new RuleInfo(225, 5),
                new RuleInfo(225, 4),
                new RuleInfo(226, 2),
                new RuleInfo(226, 0),
                new RuleInfo(224, 1),
                new RuleInfo(224, 0),
                new RuleInfo(220, 1),
                new RuleInfo(220, 0),
                new RuleInfo(215, 3),
                new RuleInfo(215, 1),
                new RuleInfo(147, 11),
                new RuleInfo(227, 1),
                new RuleInfo(227, 0),
                new RuleInfo(178, 0),
                new RuleInfo(178, 3),
                new RuleInfo(187, 5),
                new RuleInfo(187, 3),
                new RuleInfo(228, 0),
                new RuleInfo(228, 2),
                new RuleInfo(147, 4),
                new RuleInfo(147, 1),
                new RuleInfo(147, 2),
                new RuleInfo(147, 3),
                new RuleInfo(147, 5),
                new RuleInfo(147, 6),
                new RuleInfo(147, 5),
                new RuleInfo(147, 6),
                new RuleInfo(229, 1),
                new RuleInfo(229, 1),
                new RuleInfo(229, 1),
                new RuleInfo(229, 1),
                new RuleInfo(229, 1),
                new RuleInfo(170, 2),
                new RuleInfo(170, 1),
                new RuleInfo(171, 2),
                new RuleInfo(230, 1),
                new RuleInfo(147, 5),
                new RuleInfo(231, 11),
                new RuleInfo(233, 1),
                new RuleInfo(233, 1),
                new RuleInfo(233, 2),
                new RuleInfo(233, 0),
                new RuleInfo(234, 1),
                new RuleInfo(234, 1),
                new RuleInfo(234, 3),
                new RuleInfo(235, 0),
                new RuleInfo(235, 3),
                new RuleInfo(236, 0),
                new RuleInfo(236, 2),
                new RuleInfo(232, 3),
                new RuleInfo(232, 2),
                new RuleInfo(238, 1),
                new RuleInfo(238, 3),
                new RuleInfo(239, 0),
                new RuleInfo(239, 3),
                new RuleInfo(239, 2),
                new RuleInfo(237, 7),
                new RuleInfo(237, 5),
                new RuleInfo(237, 5),
                new RuleInfo(237, 5),
                new RuleInfo(237, 1),
                new RuleInfo(174, 4),
                new RuleInfo(174, 6),
                new RuleInfo(191, 1),
                new RuleInfo(191, 1),
                new RuleInfo(191, 1),
                new RuleInfo(147, 4),
                new RuleInfo(147, 6),
                new RuleInfo(147, 3),
                new RuleInfo(241, 0),
                new RuleInfo(241, 2),
                new RuleInfo(240, 1),
                new RuleInfo(240, 0),
                new RuleInfo(147, 1),
                new RuleInfo(147, 3),
                new RuleInfo(147, 1),
                new RuleInfo(147, 3),
                new RuleInfo(147, 6),
                new RuleInfo(147, 6),
                new RuleInfo(242, 1),
                new RuleInfo(243, 0),
                new RuleInfo(243, 1),
                new RuleInfo(147, 1),
                new RuleInfo(147, 4),
                new RuleInfo(244, 8),
                new RuleInfo(245, 1),
                new RuleInfo(245, 3),
                new RuleInfo(246, 0),
                new RuleInfo(246, 2),
                new RuleInfo(247, 1),
                new RuleInfo(247, 3),
                new RuleInfo(248, 1),
                new RuleInfo(249, 0),
                new RuleInfo(249, 4),
                new RuleInfo(249, 2)};
        #endregion
        #region TracePrompt
        /// <summary>
        /// Turn parser tracing on by giving a stream to which to write the trace and a prompt to preface each trace message.
        /// </summary>
        public virtual string TracePrompt {
            get {
                return this._tracePrompt;
            }
            set {
                this._tracePrompt = value;
            }
        }
        #endregion
        #region Dispose
        /// <summary>
        /// Deallocate and destroy a parser.  Destructors are all called for all stack elements before shutting the parser down.
        /// </summary>
        public virtual void Dispose() {
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
        }
        #endregion
        #region PopParserStack
        /// <summary>
        /// Pop the parser's stack once.
        /// If there is a destructor routine associated with the token which is popped from the stack, then call it.
        /// </summary>
        /// <returns>Return the major token number for the symbol popped.</returns>
        protected virtual int PopParserStack() {
            StackEntry tos = this._stack[this._idx];
            if ((this._idx < 0)) {
                return 0;
            }
            if (((this._tracePrompt != null) 
                        && (this._idx >= 0))) {
                Trace.WriteLine(String.Format("{0}Popping {1}", this._tracePrompt, _tokenNames[tos.major]));
            }
            byte major = tos.major;
            this.Destructor(major, tos.minor);
            this._idx = (this._idx - 1);
            return major;
        }
        #endregion
        #region FindShiftAction
        /// <summary>
        /// Find the appropriate action for a parser given the terminal look-ahead token lookahead.
        /// If the look-ahead token is NOCODE, then check to see if the action is independent of the look-ahead.  If it is, return the action, otherwise return NO_ACTION.
        /// </summary>
        /// <param name="lookahead"></param>
        /// <returns></returns>
        protected virtual int FindShiftAction(byte lookahead) {
            int i;
            int stateno = this._stack[this._idx].stateno;
            if (((stateno > SHIFT_COUNT) 
                        || ((i = _shift_ofsts[stateno]) == SHIFT_USE_DFLT))) {
                return _defaults[stateno];
            }
            Debug.Assert((lookahead != NOCODE));
            i = (i + lookahead);
            if (((i < 0) 
                        || ((i >= ACTIONS) 
                        || (_lookaheads[i] != lookahead)))) {
                if ((lookahead > 0)) {
                    byte fallback;
                    if (((lookahead < _fallbacks.Length) 
                                && ((fallback = _fallbacks[lookahead]) == 0))) {
                        if ((this._tracePrompt != null)) {
                            Trace.WriteLine(String.Format("{0}FALLBACK {1} => {2}", this._tracePrompt, _tokenNames[lookahead], _tokenNames[fallback]));
                        }
                        return this.FindShiftAction(fallback);
                    }
                    int j = (i 
                                + (lookahead + WILDCARD));
                    if (((_lookaheads[j] == WILDCARD) 
                                && (j >= 0))) {
                        if ((this._tracePrompt != null)) {
                            Trace.WriteLine(String.Format("{0}WILDCARD {1} => {2}", this._tracePrompt, _tokenNames[lookahead], _tokenNames[WILDCARD]));
                        }
                        return _actions[j];
                    }
                }
                return _defaults[stateno];
            }
            else {
                return _actions[i];
            }
        }
        #endregion
        #region FindReduceAction
        // <summary>
        // Find the appropriate action for a parser given the non-terminal look-ahead token lookahead.
        // If the look-ahead token is NOCODE, then check to see if the action is independent of the look-ahead.  If it is, return the action, otherwise return NO_ACTION.
        // </summary>
        protected virtual int FindReduceAction(int stateno, byte lookahead) {
            Debug.Assert((stateno <= REDUCE_COUNT));
            int i = _reduce_ofsts[stateno];
            Debug.Assert((i != REDUCE_USE_DFLT));
            Debug.Assert((lookahead != NOCODE));
            i = (i + lookahead);
            Debug.Assert(((i >= 0) 
                            && (i < ACTIONS)));
            Debug.Assert((_lookaheads[i] == lookahead));
            return _actions[i];
        }
        #endregion
        #region Shift
        // <summary>
        // Perform a shift action.
        // </summary>
        protected virtual void Shift(int newState, int major, Minor minor) {
            this._idx = (this._idx + 1);
            if ((this._idx >= 100)) {
                this.StackOverflow(minor);
                return;
            }
            StackEntry tos = this._stack[this._idx];
            tos.stateno = ((ushort)(newState));
            tos.major = ((byte)(major));
            tos.minor = minor;
            this._stack[this._idx] = tos;
            if (((this._tracePrompt != null) 
                        && (this._idx > 0))) {
                Trace.WriteLine(String.Format("{0}Shift {1}", this._tracePrompt, newState));
                System.Text.StringBuilder b = new System.Text.StringBuilder(String.Format("{0}Stack:", this._tracePrompt));
                for (int i = 1; (i <= this._idx); i = (i + 1)) {
                    b.AppendFormat(_tokenNames[this._stack[i].major]);
                }
                b.ToString();
                Trace.WriteLine(b.ToString());
            }
        }
        #endregion
        #region Parse
        // <summary>
        // The main parser.
        // </summary>
        public virtual void Parse(int major, Token minor, Parse  pParse) {
            if ((this._idx < 0)) {
                this._idx = 0;
                this._errors = -1;
                this._stack[0].stateno = 0;
                this._stack[0].major = 0;
            }
            Minor minorUnion = _zeroMinor;
            minorUnion.yy0 = minor;
            bool endOfInput = (major == 0);
            this._pParse = pParse;
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Input {1}", this._tracePrompt, _tokenNames[major]));
            }
            for (bool do1 = true; do1; do1 = ((major != NOCODE) 
                        && (this._idx >= 0))) {
                int action = this.FindShiftAction(((byte)(major)));
                if ((action < STATES)) {
                    Debug.Assert((endOfInput == false));
                    this.Shift(action, major, minorUnion);
                    this._errors = (this._errors + 1);
                    major = NOCODE;
                }
                else {
                    if ((action < 954)) {
                        this.Reduce((action - STATES));
                    }
                    else {
                        Debug.Assert((action == ERROR_ACTION));
                        if ((this._tracePrompt != null)) {
                            Trace.WriteLine(String.Format("{0}Syntax Error!", this._tracePrompt));
                        }
                        if ((this._errors <= 0)) {
                            this.SyntaxError(major, minorUnion);
                        }
                        this._errors = 3;
                        this.Destructor(((byte)(major)), minorUnion);
                        if ((endOfInput == true)) {
                            this.ParseFailed();
                        }
                        major = NOCODE;
                    }
                }
            }
        }
        #endregion
        #region Destructors (switch)
        /// <summary>
        /// The following function deletes the value associated with a symbol.  The symbol can be either a terminal or nonterminal.
        /// "major" is the symbol code, and "minor" is a pointer to the value.
        /// </summary>
        private void Destructor(byte major, Minor minor) {
            Parse *pParse = this._pParse;
switch (major) {
            // Here is inserted the actions which take place when a terminal or non-terminal is destroyed.  This can happen when the symbol is popped
            // from the stack during a reduce or during error processing or when a parser is being destroyed before it is finished parsing.
            // Note: during a reduce, the only symbols destroyed are those which appear on the RHS of the rule, but which are not used inside the C code.
    case 160: /* select */
    case 194: /* oneselect */
{
#line 332 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3SelectDelete(pParse->db, (minor.yy2)); 
}
      break;
    case 173: /* term */
    case 174: /* expr */
{
#line 627 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3ExprDelete(parse->Db, (minor.yy3).pExpr); 
}
      break;
    case 178: /* idxlist_opt */
    case 187: /* idxlist */
    case 197: /* selcollist */
    case 204: /* sclp */
    case 214: /* sortlist */
    case 220: /* exprlist */
    case 225: /* case_exprlist */
{
#line 961 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3ExprListDelete(parse->Db, (minor.yy4)); 
}
      break;
    case 193: /* fullname */
{
#line 452 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3SrcListDelete(parse->Db, (minor.yy7)); 
}
      break;
    case 198: /* from */
    case 206: /* seltablist */
    case 207: /* stl_prefix */
{
#line 396 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3SrcListDelete(pParse->db, (minor.yy7)); 
}
      break;
    case 199: /* where_opt */
    case 210: /* on_opt */
    case 224: /* case_operand */
    case 226: /* case_else */
{
#line 541 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3ExprDelete(parse->Db, (minor.yy9)); 
}
      break;
    case 200: /* groupby_opt */
{
#line 500 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
sqlite3ExprListDelete(parse->Db, (minor.yy10));
}
      break;
    case 201: /* having_opt */
    case 236: /* when_clause */
{
#line 505 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3ExprDelete(pParse->db, (minor.yy9)); 
}
      break;
    case 202: /* orderby_opt */
{
#line 485 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
sqlite3ExprListDelete(parse->Db, (minor.yy4));
}
      break;
    case 211: /* using_opt */
    case 213: /* inscollist */
{
#line 479 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3IdListDelete(parse->Db, (minor.yy12)); 
}
      break;
    case 215: /* nexprlist */
{
#line 940 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3ExprListDelete(parse->Db, (minor.yy10)); 
}
      break;
    case 216: /* setlist */
{
#line 565 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3ExprListDelete(pParse->db, (minor.yy10)); 
}
      break;
    case 218: /* inscollist_opt */
{
#line 613 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3IdListDelete(parse->Db, (minor.yy14)); 
}
      break;
    case 219: /* valuelist */
{
#line 582 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3ExprListDelete(parse->Db, (minor.yy15).pList); sqlite3SelectDelete(parse->Db, (minor.yy15).pSelect); 
}
      break;
    case 232: /* trigger_cmd_list */
{
#line 1052 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3DeleteTriggerStep(parse->db, (minor.yy17)); 
}
      break;
    case 234: /* trigger_event */
{
#line 1038 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3IdListDelete(pParse->db, (minor.yy18).b); 
}
      break;
    case 237: /* trigger_cmd */
{
#line 1078 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
 sqlite3DeleteTriggerStep(pParse->db, (minor.yy17)); 
}
      break;
    case 241: /* key_opt */
{
#line 1120 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
sqlite3ExprDelete(pParse->db, (minor.yy19));
}
      break;
}
        }
        #endregion
        #region Reduce (switch)
        /// <summary>
        /// Perform a reduce action and the shift that must immediately follow the reduce.
        /// </summary>
        private void Reduce(int ruleno) {
            Parse *pParse = this._pParse;
            if (((this._tracePrompt != null) 
                        && ((ruleno >= 0) 
                        && (ruleno < _ruleNames.Length)))) {
                Trace.WriteLine(String.Format("{0}Reduce [{1}].", this._tracePrompt, _ruleNames[ruleno]));
            }
            Minor gotoMinor = _zeroMinor;
switch (ruleno) {
/* Beginning here are the reduction cases.  A typical example
** follows:
**   case 0:
**  #line <lineno> <grammarfile>
**     { ... }           // User supplied code
**     break;
*/
    case 0: /* input ::= cmdlist */
    case 1: /* cmdlist ::= cmdlist ecmd */
    case 2: /* cmdlist ::= ecmd */
    case 3: /* ecmd ::= SEMI */
    case 4: /* ecmd ::= explain cmdx SEMI */
    case 10: /* trans_opt ::= */
    case 11: /* trans_opt ::= TRANSACTION */
    case 12: /* trans_opt ::= TRANSACTION nm */
    case 20: /* savepoint_opt ::= SAVEPOINT */
    case 21: /* savepoint_opt ::= */
    case 25: /* cmd ::= create_table create_table_args */
    case 34: /* columnlist ::= columnlist COMMA column */
    case 35: /* columnlist ::= column */
    case 44: /* type ::= */
    case 51: /* signed ::= plus_num */
    case 52: /* signed ::= minus_num */
    case 53: /* carglist ::= carglist ccons */
    case 54: /* carglist ::= */
    case 61: /* ccons ::= NULL onconf */
    case 89: /* conslist ::= conslist tconscomma tcons */
    case 90: /* conslist ::= tcons */
    case 92: /* tconscomma ::= */
    case 277: /* foreach_clause ::= */
    case 278: /* foreach_clause ::= FOR EACH ROW */
    case 285: /* tridxby ::= */
    case 303: /* database_kw_opt ::= DATABASE */
    case 304: /* database_kw_opt ::= */
    case 312: /* kwcolumn_opt ::= */
    case 313: /* kwcolumn_opt ::= COLUMNKW */
    case 317: /* vtabarglist ::= vtabarg */
    case 318: /* vtabarglist ::= vtabarglist COMMA vtabarg */
    case 320: /* vtabarg ::= vtabarg vtabargtoken */
    case 324: /* anylist ::= */
    case 325: /* anylist ::= anylist LP anylist RP */
    case 326: /* anylist ::= anylist ANY */
#line 68 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{


}
      break;
    case 5: /* explain ::= */
#line 73 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3BeginParse(parse, 0); 
}
      break;
    case 6: /* explain ::= EXPLAIN */
#line 75 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3BeginParse(parse, 1); 
}
      break;
    case 7: /* explain ::= EXPLAIN QUERY PLAN */
#line 76 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3BeginParse(parse, 2); 
}
      break;
    case 8: /* cmdx ::= cmd */
#line 78 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3FinishCoding(parse); 
}
      break;
    case 9: /* cmd ::= BEGIN transtype trans_opt */
#line 82 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3BeginTransaction(parse, _stack[_idx + -1].minor.yy1); 
}
      break;
    case 13: /* transtype ::= */
#line 87 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = TK_DEFERRED; 
}
      break;
    case 14: /* transtype ::= DEFERRED */
    case 15: /* transtype ::= IMMEDIATE */
    case 16: /* transtype ::= EXCLUSIVE */
    case 115: /* multiselect_op ::= UNION */
    case 117: /* multiselect_op ::= EXCEPT|INTERSECT */
#line 88 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = _stack[_idx + 0].major; 
}
      break;
    case 17: /* cmd ::= COMMIT trans_opt */
    case 18: /* cmd ::= END trans_opt */
#line 91 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3CommitTransaction(parse); 
}
      break;
    case 19: /* cmd ::= ROLLBACK trans_opt */
#line 93 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3RollbackTransaction(parse); 
}
      break;
    case 22: /* cmd ::= SAVEPOINT nm */
#line 97 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3Savepoint(parse, SAVEPOINT_BEGIN, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 23: /* cmd ::= RELEASE savepoint_opt nm */
#line 100 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3Savepoint(parse, SAVEPOINT_RELEASE, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 24: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
#line 103 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3Savepoint(parse, SAVEPOINT_ROLLBACK, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 26: /* create_table ::= createkw temp TABLE ifnotexists nm dbnm */
#line 110 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3StartTable(parse,&_stack[_idx + -1].minor.yy0,&_stack[_idx + 0].minor.yy0,_stack[_idx + -4].minor.yy1,0,0,_stack[_idx + -2].minor.yy1);

}
      break;
    case 27: /* createkw ::= CREATE */
#line 113 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	parse->Db->Lookaside.Enabled = false;
	gotoMinor.yy0 = _stack[_idx + 0].minor.yy0;

}
      break;
    case 28: /* ifnotexists ::= */
    case 31: /* temp ::= */
    case 69: /* autoinc ::= */
    case 82: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
    case 84: /* init_deferred_pred_opt ::= */
    case 86: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
    case 98: /* defer_subclause_opt ::= */
    case 109: /* ifexists ::= */
    case 221: /* between_op ::= BETWEEN */
    case 224: /* in_op ::= IN */
#line 118 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = 0; 
}
      break;
    case 29: /* ifnotexists ::= IF NOT EXISTS */
    case 30: /* temp ::= TEMP */
    case 70: /* autoinc ::= AUTOINCR */
    case 85: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
    case 108: /* ifexists ::= IF EXISTS */
    case 222: /* between_op ::= NOT BETWEEN */
    case 225: /* in_op ::= NOT IN */
#line 119 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = 1; 
}
      break;
    case 32: /* create_table_args ::= LP columnlist conslist_opt RP */
#line 125 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3EndTable(parse, &_stack[_idx + -1].minor.yy0, &_stack[_idx + 0].minor.yy0, 0);

}
      break;
    case 33: /* create_table_args ::= AS select */
#line 128 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3EndTable(parse, 0, 0, _stack[_idx + 0].minor.yy2);
	sqlite3SelectDelete(parse->Db, _stack[_idx + 0].minor.yy2);

}
      break;
    case 36: /* column ::= columnid type carglist */
#line 137 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy0.z = _stack[_idx + -2].minor.yy0.z;
	gotoMinor.yy0.n = (int)(parse->LastToken.z - _stack[_idx + -2].minor.yy0.z) + parse->LastToken.n;

}
      break;
    case 37: /* columnid ::= nm */
#line 141 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3AddColumn(parse, &_stack[_idx + 0].minor.yy0);
	gotoMinor.yy0 = _stack[_idx + 0].minor.yy0;
	parse->ConstraintName.n = 0;

}
      break;
    case 38: /* id ::= ID */
    case 39: /* id ::= INDEXED */
    case 40: /* ids ::= ID|STRING */
    case 41: /* nm ::= id */
    case 42: /* nm ::= STRING */
    case 43: /* nm ::= JOIN_KW */
    case 46: /* typetoken ::= typename */
    case 49: /* typename ::= ids */
    case 127: /* as ::= AS nm */
    case 128: /* as ::= ids */
    case 138: /* dbnm ::= DOT nm */
    case 147: /* indexed_opt ::= INDEXED BY nm */
    case 250: /* collate ::= COLLATE ids */
    case 259: /* nmnum ::= plus_num */
    case 260: /* nmnum ::= nm */
    case 261: /* nmnum ::= ON */
    case 262: /* nmnum ::= DELETE */
    case 263: /* nmnum ::= DEFAULT */
    case 264: /* plus_num ::= PLUS number */
    case 265: /* plus_num ::= number */
    case 266: /* minus_num ::= MINUS number */
    case 267: /* number ::= INTEGER|FLOAT */
    case 283: /* trnm ::= nm */
#line 150 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0 = _stack[_idx + 0].minor.yy0; 
}
      break;
    case 45: /* type ::= typetoken */
#line 200 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AddColumnType(parse, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 47: /* typetoken ::= typename LP signed RP */
#line 202 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy0.z = _stack[_idx + -3].minor.yy0.z;
	gotoMinor.yy0.n = (int)(&_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n] - _stack[_idx + -3].minor.yy0.z);

}
      break;
    case 48: /* typetoken ::= typename LP signed COMMA signed RP */
#line 206 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy0.z = _stack[_idx + -5].minor.yy0.z;
	gotoMinor.yy0.n = (int)(&_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n] - _stack[_idx + -5].minor.yy0.z);

}
      break;
    case 50: /* typename ::= typename ids */
#line 212 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0.z = _stack[_idx + -1].minor.yy0.z; gotoMinor.yy0.n = _stack[_idx + 0].minor.yy0.n+(int)(_stack[_idx + 0].minor.yy0.z - _stack[_idx + -1].minor.yy0.z); 
}
      break;
    case 55: /* ccons ::= CONSTRAINT nm */
#line 219 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
pParse->constraintName = _stack[_idx + 0].minor.yy0;
}
      break;
    case 56: /* ccons ::= DEFAULT term */
    case 58: /* ccons ::= DEFAULT PLUS term */
#line 220 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
sqlite3AddDefaultValue(pParse,&_stack[_idx + 0].minor.yy3);
}
      break;
    case 57: /* ccons ::= DEFAULT LP expr RP */
#line 221 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
sqlite3AddDefaultValue(pParse,&_stack[_idx + -1].minor.yy3);
}
      break;
    case 59: /* ccons ::= DEFAULT MINUS term */
#line 223 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	ExprSpan v;
	v.Expr = sqlite3PExpr(parse, TK_UMINUS, _stack[_idx + 0].minor.yy3.Expr, 0, 0);
	v.Start = _stack[_idx + -1].minor.yy0.z;
	v.End = _stack[_idx + 0].minor.yy3.End;
	sqlite3AddDefaultValue(parse, &v);

}
      break;
    case 60: /* ccons ::= DEFAULT id */
#line 230 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	ExprSpan v;
	spanExpr(&v, parse, TK_STRING, &_stack[_idx + 0].minor.yy0);
	sqlite3AddDefaultValue(parse, &v);

}
      break;
    case 62: /* ccons ::= NOT NULL onconf */
#line 238 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AddNotNull(parse, _stack[_idx + 0].minor.yy1); 
}
      break;
    case 63: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
#line 240 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AddPrimaryKey(parse, 0, _stack[_idx + -1].minor.yy1, _stack[_idx + 0].minor.yy1, _stack[_idx + -2].minor.yy1); 
}
      break;
    case 64: /* ccons ::= UNIQUE onconf */
#line 241 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3CreateIndex(parse, 0, 0, 0, 0, _stack[_idx + 0].minor.yy1, 0, 0, 0, 0); 
}
      break;
    case 65: /* ccons ::= CHECK LP expr RP */
#line 242 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AddCheckConstraint(parse, _stack[_idx + -1].minor.yy3.Expr); 
}
      break;
    case 66: /* ccons ::= REFERENCES nm idxlist_opt refargs */
#line 244 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3CreateForeignKey(parse, 0, &_stack[_idx + -2].minor.yy0, _stack[_idx + -1].minor.yy4, _stack[_idx + 0].minor.yy1); 
}
      break;
    case 67: /* ccons ::= defer_subclause */
#line 245 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3DeferForeignKey(parse, _stack[_idx + 0].minor.yy1); 
}
      break;
    case 68: /* ccons ::= COLLATE ids */
#line 246 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AddCollateType(parse, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 71: /* refargs ::= */
#line 256 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_None*0x0101; /* EV: R-19803-45884 */
}
      break;
    case 72: /* refargs ::= refargs refarg */
#line 257 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = (_stack[_idx + -1].minor.yy1 & ~_stack[_idx + 0].minor.yy5.mask) | _stack[_idx + 0].minor.yy5.value; 
}
      break;
    case 73: /* refarg ::= MATCH nm */
    case 74: /* refarg ::= ON INSERT refact */
#line 259 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy5.value = 0;     gotoMinor.yy5.mask = 0x000000; 
}
      break;
    case 75: /* refarg ::= ON DELETE refact */
#line 261 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy5.value = _stack[_idx + 0].minor.yy1;     gotoMinor.yy5.mask = 0x0000ff; 
}
      break;
    case 76: /* refarg ::= ON UPDATE refact */
#line 262 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy5.value = _stack[_idx + 0].minor.yy1<<8;  gotoMinor.yy5.mask = 0x00ff00; 
}
      break;
    case 77: /* refact ::= SET NULL */
#line 264 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_SetNull;  /* EV: R-33326-45252 */
}
      break;
    case 78: /* refact ::= SET DEFAULT */
#line 265 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_SetDflt;  /* EV: R-33326-45252 */
}
      break;
    case 79: /* refact ::= CASCADE */
#line 266 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Cascade;  /* EV: R-33326-45252 */
}
      break;
    case 80: /* refact ::= RESTRICT */
#line 267 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Restrict; /* EV: R-33326-45252 */
}
      break;
    case 81: /* refact ::= NO ACTION */
#line 268 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_None;     /* EV: R-33326-45252 */
}
      break;
    case 83: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
    case 99: /* defer_subclause_opt ::= defer_subclause */
    case 101: /* onconf ::= ON CONFLICT resolvetype */
    case 104: /* resolvetype ::= raisetype */
#line 271 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = _stack[_idx + 0].minor.yy1; 
}
      break;
    case 87: /* conslist_opt ::= */
#line 277 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0.n = 0; gotoMinor.yy0.z = 0; 
}
      break;
    case 88: /* conslist_opt ::= COMMA conslist */
#line 278 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0 = _stack[_idx + -1].minor.yy0; 
}
      break;
    case 91: /* tconscomma ::= COMMA */
#line 281 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 parse->ConstraintName.n = 0;
}
      break;
    case 93: /* tcons ::= CONSTRAINT nm */
#line 283 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 parse->ConstraintName = _stack[_idx + 0].minor.yy0; 
}
      break;
    case 94: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
#line 284 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AddPrimaryKey(parse, _stack[_idx + -3].minor.yy4, _stack[_idx + 0].minor.yy1, _stack[_idx + -2].minor.yy1, 0); 
}
      break;
    case 95: /* tcons ::= UNIQUE LP idxlist RP onconf */
#line 285 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3CreateIndex(parse, 0, 0, 0, _stack[_idx + -2].minor.yy4, _stack[_idx + 0].minor.yy1, 0, 0, 0, 0); 
}
      break;
    case 96: /* tcons ::= CHECK LP expr RP onconf */
#line 286 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AddCheckConstraint(parse, _stack[_idx + -2].minor.yy3.Expr); 
}
      break;
    case 97: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
#line 288 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

		sqlite3CreateForeignKey(pParse, _stack[_idx + -6].minor.yy4, &_stack[_idx + -3].minor.yy0, _stack[_idx + -2].minor.yy4, _stack[_idx + -1].minor.yy1);
		sqlite3DeferForeignKey(pParse, _stack[_idx + 0].minor.yy1);

}
      break;
    case 100: /* onconf ::= */
#line 300 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Default; 
}
      break;
    case 102: /* orconf ::= */
#line 302 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy6 = OE_Default; 
}
      break;
    case 103: /* orconf ::= OR resolvetype */
#line 303 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy6 = (uint8)_stack[_idx + 0].minor.yy1; 
}
      break;
    case 105: /* resolvetype ::= IGNORE */
#line 305 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Ignore; 
}
      break;
    case 106: /* resolvetype ::= REPLACE */
#line 306 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Replace; 
}
      break;
    case 107: /* cmd ::= DROP TABLE ifexists fullname */
#line 309 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3DropTable(parse, _stack[_idx + 0].minor.yy7, 0, _stack[_idx + -1].minor.yy1); 
}
      break;
    case 110: /* cmd ::= createkw temp VIEW ifnotexists nm dbnm AS select */
#line 316 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3CreateView(parse, &_stack[_idx + -7].minor.yy0, &_stack[_idx + -3].minor.yy0, &_stack[_idx + -2].minor.yy0, _stack[_idx + 0].minor.yy2, _stack[_idx + -6].minor.yy1, _stack[_idx + -4].minor.yy1); 
}
      break;
    case 111: /* cmd ::= DROP VIEW ifexists fullname */
#line 317 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3DropTable(parse, _stack[_idx + 0].minor.yy7, 1, _stack[_idx + -1].minor.yy1); 
}
      break;
    case 112: /* cmd ::= select */
#line 322 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	SelectDest dest = { SRT_Output, 0, 0, 0, 0 };
	sqlite3Select(parse, _stack[_idx + 0].minor.yy2, &dest);
	sqlite3ExplainBegin(parse->Vdbe);
	sqlite3ExplainSelect(parse->Vdbe, _stack[_idx + 0].minor.yy2);
	sqlite3ExplainFinish(parse->Vdbe);
	sqlite3SelectDelete(parse->Db, _stack[_idx + 0].minor.yy2);

}
      break;
    case 113: /* select ::= oneselect */
#line 336 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy2 = _stack[_idx + 0].minor.yy2; 
}
      break;
    case 114: /* select ::= select multiselect_op oneselect */
#line 338 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	if (_stack[_idx + 0].minor.yy2) { _stack[_idx + 0].minor.yy2->op = (uint8)_stack[_idx + -1].minor.yy1; _stack[_idx + 0].minor.yy2->Prior = _stack[_idx + -2].minor.yy2; }
	else
		sqlite3SelectDelete(pParse->db, _stack[_idx + -2].minor.yy2);
	gotoMinor.yy2 = _stack[_idx + 0].minor.yy2;

}
      break;
    case 116: /* multiselect_op ::= UNION ALL */
#line 346 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = TK_ALL; 
}
      break;
    case 118: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
#line 350 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy2 = sqlite3SelectNew(parse, _stack[_idx + -6].minor.yy4, _stack[_idx + -5].minor.yy7, _stack[_idx + -4].minor.yy9, _stack[_idx + -3].minor.yy10, _stack[_idx + -2].minor.yy9, _stack[_idx + -1].minor.yy4, _stack[_idx + -7].minor.yy8, _stack[_idx + 0].minor.yy11.Limit, _stack[_idx + 0].minor.yy11.Offset);

}
      break;
    case 119: /* distinct ::= DISTINCT */
#line 356 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy8 = SF_Distinct; 
}
      break;
    case 120: /* distinct ::= ALL */
    case 121: /* distinct ::= */
#line 357 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy8 = 0; 
}
      break;
    case 122: /* sclp ::= selcollist COMMA */
    case 246: /* idxlist_opt ::= LP idxlist RP */
#line 366 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy4 = _stack[_idx + -1].minor.yy4; 
}
      break;
    case 123: /* sclp ::= */
    case 151: /* orderby_opt ::= */
    case 239: /* exprlist ::= */
    case 245: /* idxlist_opt ::= */
#line 367 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy4 = 0; 
}
      break;
    case 124: /* selcollist ::= sclp expr as */
#line 368 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy4 = sqlite3ExprListAppend(parse, _stack[_idx + -2].minor.yy4, _stack[_idx + -1].minor.yy3.Expr);
	if (_stack[_idx + 0].minor.yy0.n > 0) sqlite3ExprListSetName(parse, gotoMinor.yy4, &_stack[_idx + 0].minor.yy0, 1);
	sqlite3ExprListSetSpan(parse, gotoMinor.yy4, &_stack[_idx + -1].minor.yy3);

}
      break;
    case 125: /* selcollist ::= sclp STAR */
#line 373 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Expr *p = sqlite3Expr(parse->Db, TK_ALL, 0);
	gotoMinor.yy4 = sqlite3ExprListAppend(parse, _stack[_idx + -1].minor.yy4, p);

}
      break;
    case 126: /* selcollist ::= sclp nm DOT STAR */
#line 377 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Expr *right = sqlite3PExpr(parse, TK_ALL, 0, 0, &_stack[_idx + 0].minor.yy0);
	Expr *left = sqlite3PExpr(parse, TK_ID, 0, 0, &_stack[_idx + -2].minor.yy0);
	Expr *dot = sqlite3PExpr(parse, TK_DOT, left, right, 0);
	gotoMinor.yy4 = sqlite3ExprListAppend(parse, _stack[_idx + -3].minor.yy4, dot);

}
      break;
    case 129: /* as ::= */
#line 388 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0.n = 0; 
}
      break;
    case 130: /* from ::= */
#line 399 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy7 = sqlite3DbMallocZero(parse->db, sizeof(*gotoMinor.yy7)); 
}
      break;
    case 131: /* from ::= FROM seltablist */
#line 400 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy7 = _stack[_idx + 0].minor.yy7;
	sqlite3SrcListShiftJoinType(gotoMinor.yy7);

}
      break;
    case 132: /* stl_prefix ::= seltablist joinop */
#line 406 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy7 = _stack[_idx + -1].minor.yy7;
	if (ALWAYS(gotoMinor.yy7 && gotoMinor.yy7->nSrc > 0)) gotoMinor.yy7->a[gotoMinor.yy7->nSrc-1].jointype = (uint8)_stack[_idx + 0].minor.yy1;

}
      break;
    case 133: /* stl_prefix ::= */
#line 410 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy7 = 0; 
}
      break;
    case 134: /* seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt */
#line 412 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy7 = sqlite3SrcListAppendFromTerm(parse, _stack[_idx + -6].minor.yy7, &_stack[_idx + -5].minor.yy0, &_stack[_idx + -4].minor.yy0, &_stack[_idx + -3].minor.yy0, 0, _stack[_idx + -1].minor.yy9, _stack[_idx + 0].minor.yy12);
	sqlite3SrcListIndexedBy(parse, gotoMinor.yy7, &_stack[_idx + -2].minor.yy0);

}
      break;
    case 135: /* seltablist ::= stl_prefix LP select RP as on_opt using_opt */
#line 418 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy7 = sqlite3SrcListAppendFromTerm(pParse,_stack[_idx + -6].minor.yy7,0,0,&_stack[_idx + -2].minor.yy0,_stack[_idx + -4].minor.yy2,_stack[_idx + -1].minor.yy9,_stack[_idx + 0].minor.yy12);

}
      break;
    case 136: /* seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt */
#line 422 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

    if (_stack[_idx + -6].minor.yy7 == 0 && _stack[_idx + -2].minor.yy0.n == 0 && _stack[_idx + -1].minor.yy9 == 0 && _stack[_idx + 0].minor.yy12 == 0)
		gotoMinor.yy7 = _stack[_idx + -4].minor.yy7;
	else if (_stack[_idx + -4].minor.yy7->nSrc == 1)
	{
		gotoMinor.yy7 = sqlite3SrcListAppendFromTerm(parse, _stack[_idx + -6].minor.yy7, 0, 0, &_stack[_idx + -2].minor.yy0, 0, _stack[_idx + -1].minor.yy9, _stack[_idx + 0].minor.yy12);
		if (gotoMinor.yy7)
		{
			struct SrcList_item *new_ = &gotoMinor.yy7->a[gotoMinor.yy7->nSrc-1];
			struct SrcList_item *old = _stack[_idx + -4].minor.yy7->a;
			new_->zName = old->zName;
			new_->zDatabase = old->zDatabase;
			old->zName = old->zDatabase = 0;
		}
		sqlite3SrcListDelete(parse->Db, _stack[_idx + -4].minor.yy7);
	}
	else
	{
		sqlite3SrcListShiftJoinType(_stack[_idx + -4].minor.yy7);
		Select *subquery = sqlite3SelectNew(parse, 0, _stack[_idx + -4].minor.yy7, 0, 0, 0, 0, SF_NestedFrom, 0, 0);
		gotoMinor.yy7 = sqlite3SrcListAppendFromTerm(parse, _stack[_idx + -6].minor.yy7, 0, 0, &_stack[_idx + -2].minor.yy0, subquery, _stack[_idx + -1].minor.yy9, _stack[_idx + 0].minor.yy12);
	}

}
      break;
    case 137: /* dbnm ::= */
    case 146: /* indexed_opt ::= */
#line 448 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0.z=0; gotoMinor.yy0.n=0; 
}
      break;
    case 139: /* fullname ::= nm dbnm */
#line 453 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy7 = sqlite3SrcListAppend(parse->Db, 0, &_stack[_idx + -1].minor.yy0, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 140: /* joinop ::= COMMA|JOIN */
#line 457 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = JT_INNER; 
}
      break;
    case 141: /* joinop ::= JOIN_KW JOIN */
#line 458 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = sqlite3JoinType(parse, &_stack[_idx + -1].minor.yy0, 0, 0); 
}
      break;
    case 142: /* joinop ::= JOIN_KW nm JOIN */
#line 459 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = sqlite3JoinType(parse, &_stack[_idx + -2].minor.yy0, &_stack[_idx + -1].minor.yy0, 0); 
}
      break;
    case 143: /* joinop ::= JOIN_KW nm nm JOIN */
#line 460 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = sqlite3JoinType(parse, &_stack[_idx + -3].minor.yy0, &_stack[_idx + -2].minor.yy0, &_stack[_idx + -1].minor.yy0); 
}
      break;
    case 144: /* on_opt ::= ON expr */
    case 161: /* having_opt ::= HAVING expr */
    case 168: /* where_opt ::= WHERE expr */
    case 234: /* case_else ::= ELSE expr */
    case 236: /* case_operand ::= expr */
    case 280: /* when_clause ::= WHEN expr */
#line 464 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy9 = _stack[_idx + 0].minor.yy3.pExpr; 
}
      break;
    case 145: /* on_opt ::= */
    case 160: /* having_opt ::= */
    case 167: /* where_opt ::= */
    case 235: /* case_else ::= */
    case 237: /* case_operand ::= */
    case 279: /* when_clause ::= */
#line 465 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy9 = 0; 
}
      break;
    case 148: /* indexed_opt ::= NOT INDEXED */
#line 476 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0.z=0; gotoMinor.yy0.n=1; 
}
      break;
    case 149: /* using_opt ::= USING LP inscollist RP */
#line 480 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy12 = _stack[_idx + -1].minor.yy12; 
}
      break;
    case 150: /* using_opt ::= */
#line 481 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy12 = 0; 
}
      break;
    case 152: /* orderby_opt ::= ORDER BY sortlist */
#line 490 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy4 = _stack[_idx + 0].minor.yy4; 
}
      break;
    case 153: /* sortlist ::= sortlist COMMA expr sortorder */
#line 491 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy4 = sqlite3ExprListAppend(parse, _stack[_idx + -3].minor.yy4, _stack[_idx + -1].minor.yy3.pExpr); if (gotoMinor.yy4) gotoMinor.yy4->a[gotoMinor.yy4->nExpr-1].sortOrder = (uint8)_stack[_idx + 0].minor.yy1; 
}
      break;
    case 154: /* sortlist ::= expr sortorder */
#line 492 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy4 = sqlite3ExprListAppend(parse, 0, _stack[_idx + -1].minor.yy3.pExpr); if (gotoMinor.yy4 && ALWAYS(gotoMinor.yy4->a)) gotoMinor.yy4->a[0].sortOrder = (uint8)_stack[_idx + 0].minor.yy1; 
}
      break;
    case 155: /* sortorder ::= ASC */
    case 157: /* sortorder ::= */
#line 495 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = SQLITE_SO_ASC; 
}
      break;
    case 156: /* sortorder ::= DESC */
#line 496 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = SQLITE_SO_DESC; 
}
      break;
    case 158: /* groupby_opt ::= */
#line 501 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy10 = 0; 
}
      break;
    case 159: /* groupby_opt ::= GROUP BY nexprlist */
#line 502 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy10 = _stack[_idx + 0].minor.yy10; 
}
      break;
    case 162: /* limit_opt ::= */
#line 519 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy11.pLimit = 0; gotoMinor.yy11.pOffset = 0; 
}
      break;
    case 163: /* limit_opt ::= LIMIT expr */
#line 520 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy11.pLimit = _stack[_idx + 0].minor.yy3.pExpr; gotoMinor.yy11.pOffset = 0; 
}
      break;
    case 164: /* limit_opt ::= LIMIT expr OFFSET expr */
#line 521 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy11.pLimit = _stack[_idx + -2].minor.yy3.pExpr; gotoMinor.yy11.pOffset = _stack[_idx + 0].minor.yy3.pExpr; 
}
      break;
    case 165: /* limit_opt ::= LIMIT expr COMMA expr */
#line 522 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy11.pOffset = _stack[_idx + -2].minor.yy3.pExpr; gotoMinor.yy11.pLimit = _stack[_idx + 0].minor.yy3.pExpr; 
}
      break;
    case 166: /* cmd ::= DELETE FROM fullname indexed_opt where_opt */
#line 534 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

		sqlite3SrcListIndexedBy(parse, _stack[_idx + -2].minor.yy7, &_stack[_idx + -1].minor.yy0);
		sqlite3DeleteFrom(parse, _stack[_idx + -2].minor.yy7, _stack[_idx + 0].minor.yy9);

}
      break;
    case 169: /* cmd ::= UPDATE orconf fullname indexed_opt SET setlist where_opt */
#line 557 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3SrcListIndexedBy(parse, _stack[_idx + -4].minor.yy7, &_stack[_idx + -3].minor.yy0);
	sqlite3ExprListCheckLength(parse, _stack[_idx + -1].minor.yy10, "set list"); 
	sqlite3Update(parse, _stack[_idx + -4].minor.yy7, _stack[_idx + -1].minor.yy10, _stack[_idx + 0].minor.yy9, _stack[_idx + -5].minor.yy6);

}
      break;
    case 170: /* setlist ::= setlist COMMA nm EQ expr */
#line 566 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy10 = sqlite3ExprListAppend(parse, _stack[_idx + -4].minor.yy10, _stack[_idx + 0].minor.yy3.pExpr); sqlite3ExprListSetName(parse, gotoMinor.yy10, &_stack[_idx + -2].minor.yy0, 1); 
}
      break;
    case 171: /* setlist ::= nm EQ expr */
#line 567 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy10 = sqlite3ExprListAppend(parse, 0, _stack[_idx + 0].minor.yy3.pExpr); sqlite3ExprListSetName(parse, gotoMinor.yy10, &_stack[_idx + -2].minor.yy0, 1); 
}
      break;
    case 172: /* cmd ::= insert_cmd INTO fullname inscollist_opt valuelist */
#line 570 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Insert(pParse, _stack[_idx + -2].minor.yy7, _stack[_idx + 0].minor.yy15.pList, _stack[_idx + 0].minor.yy15.pSelect, _stack[_idx + -1].minor.yy14, _stack[_idx + -4].minor.yy13); 
}
      break;
    case 173: /* cmd ::= insert_cmd INTO fullname inscollist_opt select */
#line 571 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Insert(pParse, _stack[_idx + -2].minor.yy7, 0, _stack[_idx + 0].minor.yy2, _stack[_idx + -1].minor.yy14, _stack[_idx + -4].minor.yy13); 
}
      break;
    case 174: /* cmd ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES */
#line 572 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Insert(pParse, _stack[_idx + -3].minor.yy7, 0, 0, _stack[_idx + -2].minor.yy14, _stack[_idx + -5].minor.yy13); 
}
      break;
    case 175: /* insert_cmd ::= INSERT orconf */
#line 575 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy13 = _stack[_idx + 0].minor.yy6; 
}
      break;
    case 176: /* insert_cmd ::= REPLACE */
#line 576 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy13 = OE_Replace; 
}
      break;
    case 177: /* valuelist ::= VALUES LP nexprlist RP */
#line 583 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy15.pList = _stack[_idx + -1].minor.yy10; gotoMinor.yy15.pSelect = 0; 
}
      break;
    case 178: /* valuelist ::= valuelist COMMA LP exprlist RP */
#line 587 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Select *right = sqlite3SelectNew(parse, _stack[_idx + -1].minor.yy4, 0, 0, 0, 0, 0, 0, 0, 0);
	if (_stack[_idx + -4].minor.yy15.pList)
	{
		_stack[_idx + -4].minor.yy15.pSelect = sqlite3SelectNew(parse, _stack[_idx + -4].minor.yy15.pList, 0, 0, 0, 0, 0, 0, 0, 0);
		_stack[_idx + -4].minor.yy15.pList = 0;
	}
	gotoMinor.yy15.pList = 0;
	if (_stack[_idx + -4].minor.yy15.pSelect == 0 || right == 0)
	{
		sqlite3SelectDelete(parse->Db, right);
		sqlite3SelectDelete(parse->Db, _stack[_idx + -4].minor.yy15.pSelect);
		gotoMinor.yy15.pSelect = 0;
	}
	else
	{
		right->op = TK_ALL;
		right->pPrior = _stack[_idx + -4].minor.yy15.pSelect;
		right->selFlags |= SF_Values;
		right->pPrior->selFlags |= SF_Values;
		gotoMinor.yy15.pSelect = right;
	}

}
      break;
    case 179: /* inscollist_opt ::= */
#line 617 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy14 = 0; 
}
      break;
    case 180: /* inscollist_opt ::= LP inscollist RP */
#line 618 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy14 = _stack[_idx + -1].minor.yy12; 
}
      break;
    case 181: /* inscollist ::= inscollist COMMA nm */
#line 619 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy12 = sqlite3IdListAppend(parse->Db, _stack[_idx + -2].minor.yy12, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 182: /* inscollist ::= nm */
#line 620 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy12 = sqlite3IdListAppend(parse->Db, 0, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 183: /* expr ::= term */
#line 648 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy3 = _stack[_idx + 0].minor.yy3; 
}
      break;
    case 184: /* expr ::= LP expr RP */
#line 649 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy3.pExpr = _stack[_idx + -1].minor.yy3.pExpr; spanSet(&gotoMinor.yy3, &_stack[_idx + -2].minor.yy0, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 185: /* term ::= NULL */
    case 190: /* term ::= INTEGER|FLOAT|BLOB */
    case 191: /* term ::= STRING */
#line 650 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanExpr(&gotoMinor.yy3, parse, _stack[_idx + 0].major, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 186: /* expr ::= id */
    case 187: /* expr ::= JOIN_KW */
#line 651 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanExpr(&gotoMinor.yy3, parse, TK_ID, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 188: /* expr ::= nm DOT nm */
#line 653 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Expr *temp1 = sqlite3PExpr(parse, TK_ID, 0, 0, &_stack[_idx + -2].minor.yy0);
	Expr *temp2 = sqlite3PExpr(parse, TK_ID, 0, 0, &_stack[_idx + 0].minor.yy0);
	gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_DOT, temp1, temp2, 0);
	spanSet(&gotoMinor.yy3, &_stack[_idx + -2].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 189: /* expr ::= nm DOT nm DOT nm */
#line 659 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Expr *temp1 = sqlite3PExpr(parse, TK_ID, 0, 0, &_stack[_idx + -4].minor.yy0);
	Expr *temp2 = sqlite3PExpr(parse, TK_ID, 0, 0, &_stack[_idx + -2].minor.yy0);
	Expr *temp3 = sqlite3PExpr(parse, TK_ID, 0, 0, &_stack[_idx + 0].minor.yy0);
	Expr *temp4 = sqlite3PExpr(parse, TK_DOT, temp2, temp3, 0);
	gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_DOT, temp1, temp4, 0);
	spanSet(&gotoMinor.yy3, &_stack[_idx + -4].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 192: /* expr ::= REGISTER */
#line 669 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	// When doing a nested parse, one can include terms in an expression that look like this:   #1 #2 ...  These terms refer to registers
	// in the virtual machine.  #N is the N-th register.
	if (parse->Nested == 0)
	{
		sqlite3ErrorMsg(parse, "near \"%T\": syntax error", &_stack[_idx + 0].minor.yy0);
		gotoMinor.yy3.pExpr = 0;
	}
	else
	{
		gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_REGISTER, 0, 0, &_stack[_idx + 0].minor.yy0);
		if (gotoMinor.yy3.pExpr) sqlite3GetInt32(&_stack[_idx + 0].minor.yy0.z[1], &gotoMinor.yy3.pExpr->iTable);
	}
	spanSet(&gotoMinor.yy3, &_stack[_idx + 0].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 193: /* expr ::= VARIABLE */
#line 684 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	spanExpr(&gotoMinor.yy3, pParse, TK_VARIABLE, &_stack[_idx + 0].minor.yy0);
	sqlite3ExprAssignVarNumber(pParse, gotoMinor.yy3.pExpr);
	spanSet(&gotoMinor.yy3, &_stack[_idx + 0].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 194: /* expr ::= expr COLLATE ids */
#line 689 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy3.pExpr = sqlite3ExprAddCollateToken(parse, _stack[_idx + -2].minor.yy3.pExpr, &_stack[_idx + 0].minor.yy0);
	gotoMinor.yy3.zStart = _stack[_idx + -2].minor.yy3.zStart;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 195: /* expr ::= CAST LP expr AS typetoken RP */
#line 695 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

  gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_CAST, _stack[_idx + -3].minor.yy3.pExpr, 0, &_stack[_idx + -1].minor.yy0);
  spanSet(&gotoMinor.yy3, &_stack[_idx + -5].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 196: /* expr ::= ID LP distinct exprlist RP */
#line 700 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	if (_stack[_idx + -1].minor.yy4 && _stack[_idx + -1].minor.yy4->nExpr > parse->Db->Limits[SQLITE_LIMIT_FUNCTION_ARG])
		sqlite3ErrorMsg(parse, "too many arguments on function %T", &_stack[_idx + -4].minor.yy0);
	gotoMinor.yy3.pExpr = sqlite3ExprFunction(parse, _stack[_idx + -1].minor.yy4, &_stack[_idx + -4].minor.yy0);
	spanSet(&gotoMinor.yy3, &_stack[_idx + -4].minor.yy0, &_stack[_idx + 0].minor.yy0);
	if (_stack[_idx + -2].minor.yy8 && gotoMinor.yy3.pExpr) gotoMinor.yy3.pExpr->flags |= EP_Distinct;

}
      break;
    case 197: /* expr ::= ID LP STAR RP */
#line 707 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy3.pExpr = sqlite3ExprFunction(parse, 0, &_stack[_idx + -3].minor.yy0);
	spanSet(&gotoMinor.yy3, &_stack[_idx + -3].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 198: /* term ::= CTIME_KW */
#line 711 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

  /// The CURRENT_TIME, CURRENT_DATE, and CURRENT_TIMESTAMP values are treated as functions that return constants
  gotoMinor.yy3.pExpr = sqlite3ExprFunction(pParse, 0,&_stack[_idx + 0].minor.yy0);
  if (gotoMinor.yy3.pExpr) gotoMinor.yy3.pExpr->op = TK_CONST_FUNC;  
  spanSet(&gotoMinor.yy3, &_stack[_idx + 0].minor.yy0, &_stack[_idx + 0].minor.yy0);

}
      break;
    case 199: /* expr ::= expr AND expr */
    case 200: /* expr ::= expr OR expr */
    case 201: /* expr ::= expr LT|GT|GE|LE expr */
    case 202: /* expr ::= expr EQ|NE expr */
    case 203: /* expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */
    case 204: /* expr ::= expr PLUS|MINUS expr */
    case 205: /* expr ::= expr STAR|SLASH|REM expr */
    case 206: /* expr ::= expr CONCAT expr */
#line 728 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanBinaryExpr(&gotoMinor.yy3, parse, _stack[_idx + -1].major, &_stack[_idx + -2].minor.yy3, &_stack[_idx + 0].minor.yy3); 
}
      break;
    case 207: /* likeop ::= LIKE_KW */
    case 209: /* likeop ::= MATCH */
#line 737 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy16.eOperator = _stack[_idx + 0].minor.yy0; gotoMinor.yy16.bNot = 0; 
}
      break;
    case 208: /* likeop ::= NOT LIKE_KW */
    case 210: /* likeop ::= NOT MATCH */
#line 738 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy16.eOperator = _stack[_idx + 0].minor.yy0; gotoMinor.yy16.bNot = 1; 
}
      break;
    case 211: /* expr ::= expr likeop expr */
#line 741 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	ExprList *pList;
	pList = sqlite3ExprListAppend(parse,0, _stack[_idx + 0].minor.yy3.pExpr);
	pList = sqlite3ExprListAppend(parse,pList, _stack[_idx + -2].minor.yy3.pExpr);
	gotoMinor.yy3.pExpr = sqlite3ExprFunction(parse, pList, &_stack[_idx + -1].minor.yy16.eOperator);
	if (_stack[_idx + -1].minor.yy16.bNot) gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_NOT, gotoMinor.yy3.pExpr, 0, 0);
	gotoMinor.yy3.zStart = _stack[_idx + -2].minor.yy3.zStart;
	gotoMinor.yy3.zEnd = _stack[_idx + 0].minor.yy3.zEnd;
	if (gotoMinor.yy3.pExpr) gotoMinor.yy3.pExpr->flags |= EP_InfixFunc;

}
      break;
    case 212: /* expr ::= expr likeop expr ESCAPE expr */
#line 751 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	ExprList *pList;
	pList = sqlite3ExprListAppend(pParse,0, _stack[_idx + -2].minor.yy3.pExpr);
	pList = sqlite3ExprListAppend(pParse,pList, _stack[_idx + -4].minor.yy3.pExpr);
	pList = sqlite3ExprListAppend(pParse,pList, _stack[_idx + 0].minor.yy3.pExpr);
	gotoMinor.yy3.pExpr = sqlite3ExprFunction(pParse, pList, &_stack[_idx + -3].minor.yy16.eOperator);
	if( _stack[_idx + -3].minor.yy16.bNot ) gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_NOT, gotoMinor.yy3.pExpr, 0, 0);
	gotoMinor.yy3.zStart = _stack[_idx + -4].minor.yy3.zStart;
	gotoMinor.yy3.zEnd = _stack[_idx + 0].minor.yy3.zEnd;
	if (gotoMinor.yy3.pExpr) gotoMinor.yy3.pExpr->flags |= EP_InfixFunc;

}
      break;
    case 213: /* expr ::= expr ISNULL|NOTNULL */
#line 773 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanUnaryPostfix(&gotoMinor.yy3,pParse,_stack[_idx + 0].major,&_stack[_idx + -1].minor.yy3,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 214: /* expr ::= expr NOT NULL */
#line 774 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanUnaryPostfix(&gotoMinor.yy3,pParse,TK_NOTNULL,&_stack[_idx + -2].minor.yy3,&_stack[_idx + 0].minor.yy0); 
}
      break;
    case 215: /* expr ::= expr IS expr */
#line 794 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanBinaryExpr(&gotoMinor.yy3,pParse,TK_IS,&_stack[_idx + -2].minor.yy3,&_stack[_idx + 0].minor.yy3); binaryToUnaryIfNull(pParse, _stack[_idx + 0].minor.yy3.pExpr, gotoMinor.yy3.pExpr, TK_ISNULL); 
}
      break;
    case 216: /* expr ::= expr IS NOT expr */
#line 795 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanBinaryExpr(&gotoMinor.yy3,pParse,TK_ISNOT,&_stack[_idx + -3].minor.yy3,&_stack[_idx + 0].minor.yy3); binaryToUnaryIfNull(pParse, _stack[_idx + 0].minor.yy3.pExpr, gotoMinor.yy3.pExpr, TK_NOTNULL); 
}
      break;
    case 217: /* expr ::= NOT expr */
    case 218: /* expr ::= BITNOT expr */
#line 807 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanUnaryPrefix(&gotoMinor.yy3, parse, _stack[_idx + -1].major, &_stack[_idx + 0].minor.yy3, &_stack[_idx + -1].minor.yy0); 
}
      break;
    case 219: /* expr ::= MINUS expr */
#line 809 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanUnaryPrefix(&gotoMinor.yy3, parse, TK_UMINUS, &_stack[_idx + 0].minor.yy3, &_stack[_idx + -1].minor.yy0); 
}
      break;
    case 220: /* expr ::= PLUS expr */
#line 810 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 spanUnaryPrefix(&gotoMinor.yy3, parse, TK_UPLUS, &_stack[_idx + 0].minor.yy3, &_stack[_idx + -1].minor.yy0); 
}
      break;
    case 223: /* expr ::= expr between_op expr AND expr */
#line 815 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	ExprList *pList = sqlite3ExprListAppend(pParse,0, _stack[_idx + -2].minor.yy3.pExpr);
	pList = sqlite3ExprListAppend(pParse,pList, _stack[_idx + 0].minor.yy3.pExpr);
	gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_BETWEEN, _stack[_idx + -4].minor.yy3.pExpr, 0, 0);
	if (gotoMinor.yy3.pExpr) gotoMinor.yy3.pExpr->x.pList = pList;
	else sqlite3ExprListDelete(pParse->db, pList);
	if (_stack[_idx + -3].minor.yy1) gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_NOT, gotoMinor.yy3.pExpr, 0, 0);
	gotoMinor.yy3.zStart = _stack[_idx + -4].minor.yy3.zStart;
	gotoMinor.yy3.zEnd = _stack[_idx + 0].minor.yy3.zEnd;

}
      break;
    case 226: /* expr ::= expr in_op LP exprlist RP */
#line 829 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	if (_stack[_idx + -1].minor.yy4 == 0)
	{
		// Expressions of the form
		//      expr1 IN ()
		//      expr1 NOT IN ()
		// simplify to constants 0 (false) and 1 (true), respectively, regardless of the value of expr1.
		gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_INTEGER, 0, 0, &sqlite3IntTokens[_stack[_idx + -3].minor.yy1]);
		sqlite3ExprDelete(parse->db, _stack[_idx + -4].minor.yy3.pExpr);
	}
	else
	{
		gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_IN, _stack[_idx + -4].minor.yy3.pExpr, 0, 0);
		if (gotoMinor.yy3.pExpr)
		{
			gotoMinor.yy3.pExpr->x.pList = _stack[_idx + -1].minor.yy4;
			sqlite3ExprSetHeight(parse, gotoMinor.yy3.pExpr);
		}
		else sqlite3ExprListDelete(parse->db, _stack[_idx + -1].minor.yy4);
		if (_stack[_idx + -3].minor.yy1) gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_NOT, gotoMinor.yy3.pExpr, 0, 0);
	}
	gotoMinor.yy3.zStart = _stack[_idx + -4].minor.yy3.zStart;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 227: /* expr ::= LP select RP */
#line 853 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_SELECT, 0, 0, 0);
	if (gotoMinor.yy3.pExpr)
	{
		gotoMinor.yy3.pExpr->x.pSelect = _stack[_idx + -1].minor.yy2;
		ExprSetProperty(gotoMinor.yy3.pExpr, EP_xIsSelect);
		sqlite3ExprSetHeight(pParse, gotoMinor.yy3.pExpr);
	}
	else sqlite3SelectDelete(pParse->db, _stack[_idx + -1].minor.yy2);
	gotoMinor.yy3.zStart = _stack[_idx + -2].minor.yy0.z;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 228: /* expr ::= expr in_op LP select RP */
#line 865 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_IN, _stack[_idx + -4].minor.yy3.pExpr, 0, 0);
	if (gotoMinor.yy3.pExpr)
	{
		gotoMinor.yy3.pExpr->x.pSelect = _stack[_idx + -1].minor.yy2;
		ExprSetProperty(gotoMinor.yy3.pExpr, EP_xIsSelect);
		sqlite3ExprSetHeight(pParse, gotoMinor.yy3.pExpr);
	}
	else sqlite3SelectDelete(pParse->db, _stack[_idx + -1].minor.yy2);
	if (_stack[_idx + -3].minor.yy1) gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_NOT, gotoMinor.yy3.pExpr, 0, 0);
	gotoMinor.yy3.zStart = _stack[_idx + -4].minor.yy3.zStart;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 229: /* expr ::= expr in_op nm dbnm */
#line 878 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	SrcList *pSrc = sqlite3SrcListAppend(pParse->db, 0,&_stack[_idx + -1].minor.yy0,&_stack[_idx + 0].minor.yy0);
	gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_IN, _stack[_idx + -3].minor.yy3.pExpr, 0, 0);
	if (gotoMinor.yy3.pExpr)
	{
		gotoMinor.yy3.pExpr->x.pSelect = sqlite3SelectNew(pParse, 0,pSrc,0,0,0,0,0,0,0);
		ExprSetProperty(gotoMinor.yy3.pExpr, EP_xIsSelect);
		sqlite3ExprSetHeight(pParse, gotoMinor.yy3.pExpr);
	}
	else sqlite3SrcListDelete(pParse->db, pSrc);
	if (_stack[_idx + -2].minor.yy1) gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_NOT, gotoMinor.yy3.pExpr, 0, 0);
	gotoMinor.yy3.zStart = _stack[_idx + -3].minor.yy3.zStart;
	gotoMinor.yy3.zEnd = _stack[_idx + 0].minor.yy0.z ? &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n] : &_stack[_idx + -1].minor.yy0.z[_stack[_idx + -1].minor.yy0.n];

}
      break;
    case 230: /* expr ::= EXISTS LP select RP */
#line 892 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Expr *p = gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_EXISTS, 0, 0, 0);
	if (p)
	{
		p->x.pSelect = _stack[_idx + -1].minor.yy2;
		ExprSetProperty(p, EP_xIsSelect);
		sqlite3ExprSetHeight(pParse, p);
	}
	else sqlite3SelectDelete(pParse->db, _stack[_idx + -1].minor.yy2);
	gotoMinor.yy3.zStart = _stack[_idx + -3].minor.yy0.z;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 231: /* expr ::= CASE case_operand case_exprlist case_else END */
#line 907 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy3.pExpr = sqlite3PExpr(pParse, TK_CASE, _stack[_idx + -3].minor.yy9, _stack[_idx + -1].minor.yy9, 0);
	if (gotoMinor.yy3.pExpr)
	{
		gotoMinor.yy3.pExpr->x.pList = _stack[_idx + -2].minor.yy4;
		sqlite3ExprSetHeight(pParse, gotoMinor.yy3.pExpr);
	}
	else sqlite3ExprListDelete(pParse->db, _stack[_idx + -2].minor.yy4);
	gotoMinor.yy3.zStart = _stack[_idx + -4].minor.yy0.z;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 232: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
#line 920 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy4 = sqlite3ExprListAppend(parse,_stack[_idx + -4].minor.yy4, _stack[_idx + -2].minor.yy3.pExpr);
	gotoMinor.yy4 = sqlite3ExprListAppend(parse,gotoMinor.yy4, _stack[_idx + 0].minor.yy3.pExpr);

}
      break;
    case 233: /* case_exprlist ::= WHEN expr THEN expr */
#line 924 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy4 = sqlite3ExprListAppend(parse,0, _stack[_idx + -2].minor.yy3.pExpr);
	gotoMinor.yy4 = sqlite3ExprListAppend(parse,gotoMinor.yy4, _stack[_idx + 0].minor.yy3.pExpr);

}
      break;
    case 238: /* exprlist ::= nexprlist */
#line 942 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy4 = _stack[_idx + 0].minor.yy10; 
}
      break;
    case 240: /* nexprlist ::= nexprlist COMMA expr */
#line 944 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy10 = sqlite3ExprListAppend(pParse, _stack[_idx + -2].minor.yy10, _stack[_idx + 0].minor.yy3.pExpr); 
}
      break;
    case 241: /* nexprlist ::= expr */
#line 945 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy10 = sqlite3ExprListAppend(pParse, 0, _stack[_idx + 0].minor.yy3.pExpr); 
}
      break;
    case 242: /* cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP idxlist RP */
#line 950 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3CreateIndex(parse, &_stack[_idx + -6].minor.yy0, &_stack[_idx + -5].minor.yy0, sqlite3SrcListAppend(parse->Db, 0, &_stack[_idx + -3].minor.yy0, 0), _stack[_idx + -1].minor.yy4, _stack[_idx + -9].minor.yy1, &_stack[_idx + -10].minor.yy0, &_stack[_idx + 0].minor.yy0, SQLITE_SO_ASC, _stack[_idx + -7].minor.yy1);

}
      break;
    case 243: /* uniqueflag ::= UNIQUE */
    case 296: /* raisetype ::= ABORT */
#line 955 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Abort; 
}
      break;
    case 244: /* uniqueflag ::= */
#line 956 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_None; 
}
      break;
    case 247: /* idxlist ::= idxlist COMMA nm collate sortorder */
#line 965 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Expr *p = sqlite3ExprAddCollateToken(pParse, 0, &_stack[_idx + -1].minor.yy0);
	gotoMinor.yy4 = sqlite3ExprListAppend(pParse,_stack[_idx + -4].minor.yy4, p);
	sqlite3ExprListSetName(pParse,gotoMinor.yy4,&_stack[_idx + -2].minor.yy0,1);
	sqlite3ExprListCheckLength(pParse, gotoMinor.yy4, "index");
	if (gotoMinor.yy4) gotoMinor.yy4->a[gotoMinor.yy4->nExpr-1].sortOrder = (uint8)_stack[_idx + 0].minor.yy1;

}
      break;
    case 248: /* idxlist ::= nm collate sortorder */
#line 972 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Expr *p = sqlite3ExprAddCollateToken(pParse, 0, &_stack[_idx + -1].minor.yy0);
	gotoMinor.yy4 = sqlite3ExprListAppend(pParse,0, p);
	sqlite3ExprListSetName(pParse, gotoMinor.yy4, &_stack[_idx + -2].minor.yy0, 1);
	sqlite3ExprListCheckLength(pParse, gotoMinor.yy4, "index");
	if (gotoMinor.yy4) gotoMinor.yy4->a[gotoMinor.yy4->nExpr-1].sortOrder = (uint8)_stack[_idx + 0].minor.yy1;

}
      break;
    case 249: /* collate ::= */
#line 981 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0.z = 0; gotoMinor.yy0.n = 0; 
}
      break;
    case 251: /* cmd ::= DROP INDEX ifexists fullname */
#line 986 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3DropIndex(pParse, _stack[_idx + 0].minor.yy7, _stack[_idx + -1].minor.yy1); 
}
      break;
    case 252: /* cmd ::= VACUUM */
    case 253: /* cmd ::= VACUUM nm */
#line 991 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Vacuum(parse); 
}
      break;
    case 254: /* cmd ::= PRAGMA nm dbnm */
#line 998 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Pragma(parse, &_stack[_idx + -1].minor.yy0, &_stack[_idx + 0].minor.yy0, 0, 0); 
}
      break;
    case 255: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
#line 999 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Pragma(parse, &_stack[_idx + -3].minor.yy0, &_stack[_idx + -2].minor.yy0, &_stack[_idx + 0].minor.yy0, 0); 
}
      break;
    case 256: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
#line 1000 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Pragma(parse, &_stack[_idx + -4].minor.yy0, &_stack[_idx + -3].minor.yy0, &_stack[_idx + -1].minor.yy0, 0); 
}
      break;
    case 257: /* cmd ::= PRAGMA nm dbnm EQ minus_num */
#line 1001 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Pragma(parse, &_stack[_idx + -3].minor.yy0, &_stack[_idx + -2].minor.yy0, &_stack[_idx + 0].minor.yy0, 1); 
}
      break;
    case 258: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */
#line 1002 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Pragma(parse, &_stack[_idx + -4].minor.yy0, &_stack[_idx + -3].minor.yy0, &_stack[_idx + -1].minor.yy0, 1); 
}
      break;
    case 268: /* cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END */
#line 1017 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	Token all;
	all.z = _stack[_idx + -3].minor.yy0.z;
	all.n = (int)(_stack[_idx + 0].minor.yy0.z - _stack[_idx + -3].minor.yy0.z) + _stack[_idx + 0].minor.yy0.n;
	sqlite3FinishTrigger(pParse, _stack[_idx + -1].minor.yy17, &all);

}
      break;
    case 269: /* trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause */
#line 1026 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	sqlite3BeginTrigger(pParse, &_stack[_idx + -7].minor.yy0, &_stack[_idx + -6].minor.yy0, _stack[_idx + -5].minor.yy1, _stack[_idx + -4].minor.yy18.a, _stack[_idx + -4].minor.yy18.b, _stack[_idx + -2].minor.yy7, _stack[_idx + 0].minor.yy9, _stack[_idx + -10].minor.yy1, _stack[_idx + -8].minor.yy1);
	gotoMinor.yy0 = (_stack[_idx + -6].minor.yy0.n==0?_stack[_idx + -7].minor.yy0:_stack[_idx + -6].minor.yy0);

}
      break;
    case 270: /* trigger_time ::= BEFORE */
    case 273: /* trigger_time ::= */
#line 1032 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = TK_BEFORE; 
}
      break;
    case 271: /* trigger_time ::= AFTER */
#line 1033 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = TK_AFTER;  
}
      break;
    case 272: /* trigger_time ::= INSTEAD OF */
#line 1034 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = TK_INSTEAD;
}
      break;
    case 274: /* trigger_event ::= DELETE|INSERT */
    case 275: /* trigger_event ::= UPDATE */
#line 1039 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy18.a = _stack[_idx + 0].major; gotoMinor.yy18.b = 0; 
}
      break;
    case 276: /* trigger_event ::= UPDATE OF inscollist */
#line 1041 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy18.a = TK_UPDATE; gotoMinor.yy18.b = _stack[_idx + 0].minor.yy12; 
}
      break;
    case 281: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
#line 1053 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	_assert(_stack[_idx + -2].minor.yy17 != 0);
	_stack[_idx + -2].minor.yy17->pLast->pNext = _stack[_idx + -1].minor.yy17;
	_stack[_idx + -2].minor.yy17->pLast = _stack[_idx + -1].minor.yy17;
	gotoMinor.yy17 = _stack[_idx + -2].minor.yy17;

}
      break;
    case 282: /* trigger_cmd_list ::= trigger_cmd SEMI */
#line 1059 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 
	_assert(_stack[_idx + -1].minor.yy17 != 0);
	_stack[_idx + -1].minor.yy17->pLast = _stack[_idx + -1].minor.yy17;
	gotoMinor.yy17 = _stack[_idx + -1].minor.yy17;

}
      break;
    case 284: /* trnm ::= nm DOT nm */
#line 1069 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy0 = _stack[_idx + 0].minor.yy0; sqlite3ErrorMsg(parse, "qualified table names are not allowed on INSERT, UPDATE, and DELETE statements within triggers"); 
}
      break;
    case 286: /* tridxby ::= INDEXED BY nm */
#line 1074 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3ErrorMsg(parse, "the INDEXED BY clause is not allowed on UPDATE or DELETE statements within triggers"); 
}
      break;
    case 287: /* tridxby ::= NOT INDEXED */
#line 1075 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3ErrorMsg(parse, "the NOT INDEXED clause is not allowed on UPDATE or DELETE statements within triggers"); 
}
      break;
    case 288: /* trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist where_opt */
#line 1080 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy17 = sqlite3TriggerUpdateStep(pParse->db, &_stack[_idx + -4].minor.yy0, _stack[_idx + -1].minor.yy10, _stack[_idx + 0].minor.yy9, _stack[_idx + -5].minor.yy6); 
}
      break;
    case 289: /* trigger_cmd ::= insert_cmd INTO trnm inscollist_opt valuelist */
#line 1082 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy17 = sqlite3TriggerInsertStep(pParse->db, &_stack[_idx + -2].minor.yy0, _stack[_idx + -1].minor.yy14, _stack[_idx + 0].minor.yy15.pList, _stack[_idx + 0].minor.yy15.pSelect, _stack[_idx + -4].minor.yy13); 
}
      break;
    case 290: /* trigger_cmd ::= insert_cmd INTO trnm inscollist_opt select */
#line 1083 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy17 = sqlite3TriggerInsertStep(pParse->db, &_stack[_idx + -2].minor.yy0, _stack[_idx + -1].minor.yy14, 0, _stack[_idx + 0].minor.yy2, _stack[_idx + -4].minor.yy13); 
}
      break;
    case 291: /* trigger_cmd ::= DELETE FROM trnm tridxby where_opt */
#line 1085 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy17 = sqlite3TriggerDeleteStep(pParse->db, &_stack[_idx + -2].minor.yy0, _stack[_idx + 0].minor.yy9); 
}
      break;
    case 292: /* trigger_cmd ::= select */
#line 1087 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy17 = sqlite3TriggerSelectStep(pParse->db, _stack[_idx + 0].minor.yy2); 
}
      break;
    case 293: /* expr ::= RAISE LP IGNORE RP */
#line 1090 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_RAISE, 0, 0, 0); 
	if (gotoMinor.yy3.pExpr) gotoMinor.yy3.pExpr->affinity = OE_Ignore;
	gotoMinor.yy3.zStart = _stack[_idx + -3].minor.yy0.z;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 294: /* expr ::= RAISE LP raisetype COMMA nm RP */
#line 1096 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{

	gotoMinor.yy3.pExpr = sqlite3PExpr(parse, TK_RAISE, 0, 0, &_stack[_idx + -1].minor.yy0); 
	if (gotoMinor.yy3.pExpr) gotoMinor.yy3.pExpr->affinity = (char)_stack[_idx + -3].minor.yy1;
	gotoMinor.yy3.zStart = _stack[_idx + -5].minor.yy0.z;
	gotoMinor.yy3.zEnd = &_stack[_idx + 0].minor.yy0.z[_stack[_idx + 0].minor.yy0.n];

}
      break;
    case 295: /* raisetype ::= ROLLBACK */
#line 1105 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Rollback; 
}
      break;
    case 297: /* raisetype ::= FAIL */
#line 1107 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy1 = OE_Fail; 
}
      break;
    case 298: /* cmd ::= DROP TRIGGER ifexists fullname */
#line 1111 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3DropTrigger(pParse,_stack[_idx + 0].minor.yy7,_stack[_idx + -1].minor.yy1); 
}
      break;
    case 299: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
#line 1116 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Attach(pParse, _stack[_idx + -3].minor.yy3.pExpr, _stack[_idx + -1].minor.yy3.pExpr, _stack[_idx + 0].minor.yy19); 
}
      break;
    case 300: /* cmd ::= DETACH database_kw_opt expr */
#line 1117 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Detach(pParse, _stack[_idx + 0].minor.yy3.pExpr); 
}
      break;
    case 301: /* key_opt ::= */
#line 1121 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy19 = 0; 
}
      break;
    case 302: /* key_opt ::= KEY expr */
#line 1122 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 gotoMinor.yy19 = _stack[_idx + 0].minor.yy3.pExpr; 
}
      break;
    case 305: /* cmd ::= REINDEX */
#line 1129 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Reindex(pParse, 0, 0); 
}
      break;
    case 306: /* cmd ::= REINDEX nm dbnm */
#line 1130 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Reindex(pParse, &_stack[_idx + -1].minor.yy0, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 307: /* cmd ::= ANALYZE */
#line 1135 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Analyze(pParse, 0, 0); 
}
      break;
    case 308: /* cmd ::= ANALYZE nm dbnm */
#line 1136 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3Analyze(pParse, &_stack[_idx + -1].minor.yy0, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 309: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
#line 1141 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AlterRenameTable(parse, _stack[_idx + -3].minor.yy7, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 310: /* cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt column */
#line 1142 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3AlterFinishAddColumn(parse, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 311: /* add_column_fullname ::= fullname */
#line 1143 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 parse->Db->lookaside.bEnabled = 0; sqlite3AlterBeginAddColumn(parse, _stack[_idx + 0].minor.yy7); 
}
      break;
    case 314: /* cmd ::= create_vtab */
#line 1150 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3VtabFinishParse(parse, 0); 
}
      break;
    case 315: /* cmd ::= create_vtab LP vtabarglist RP */
#line 1151 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3VtabFinishParse(parse, &_stack[_idx + 0].minor.yy0); 
}
      break;
    case 316: /* create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm */
#line 1153 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3VtabBeginParse(parse, &_stack[_idx + -3].minor.yy0, &_stack[_idx + -2].minor.yy0, &_stack[_idx + 0].minor.yy0, _stack[_idx + -4].minor.yy1); 
}
      break;
    case 319: /* vtabarg ::= */
#line 1156 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3VtabArgInit(parse);
}
      break;
    case 321: /* vtabargtoken ::= ANY */
    case 322: /* vtabargtoken ::= lp anylist RP */
    case 323: /* lp ::= LP */
#line 1158 "C:\_GITHUB\GpuStructs\src\SystemL.Data.net\Core+Parse\Parse.y"
{
 sqlite3VtabArgExtend(parse, &_stack[_idx + 0].minor.yy0); 
}
      break;
      default:
      break;
}
            int @goto = _ruleInfos[ruleno].LHSymbol;
            int size = _ruleInfos[ruleno].RHSymbols;
            this._idx = (this._idx - size);
            int action = this.FindReduceAction(this._stack[this._idx].stateno, ((byte)(@goto)));
            if ((action < STATES)) {
                this.Shift(action, @goto, gotoMinor);
                return;
            }
            Debug.Assert((action == ACCEPT_ACTION));
            this.Accept();
        }
        #endregion
        #region Syntax: StackOverflow
        /// <summary>
        /// The following routine is called if the stack overflows.
        /// </summary>
        private void StackOverflow(Minor minor) {
            Parse *pParse = this._pParse;
            this._idx = (this._idx + 1);
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Stack Overflow!", this._tracePrompt));
            }
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
            // Here code is inserted which will execute if the parser stack every overflows
#line 22 "C:\\_GITHUB\\GpuStructs\\src\\SystemL.Data.net\\Core+Parse\\Parse.y"

	sqlite3ErrorMsg(parse, "parser stack overflow");

            this._pParse = pParse;
        }
        #endregion
        #region Syntax: Parse Failed
        /// <summary>
        /// The following code executes when the parse fails
        /// </summary>
        // Here code is inserted which will be executed whenever the parser fails
        private void ParseFailed() {
            Parse *pParse = this._pParse;
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Fail!", this._tracePrompt));
            }
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
            this._pParse = pParse;
        }
        #endregion
        #region Syntax: Syntax Error
        /// <summary>
        /// The following code executes when a syntax error first occurs.
        /// </summary>
        private void SyntaxError(int major, Minor minor) {
            Parse *pParse = this._pParse;
#line 18 "C:\\_GITHUB\\GpuStructs\\src\\SystemL.Data.net\\Core+Parse\\Parse.y"

	_assert(TOKEN.z[0]); // The tokenizer always gives us a token
	sqlite3ErrorMsg(parse, "near \"%T\": syntax error", &TOKEN);

            this._pParse = pParse;
        }
        #endregion
        #region Syntax: Accept
        /// <summary>
        /// The following is executed when the parser accepts
        /// </summary>
        // Here code is inserted which will be executed whenever the parser accepts
        private void Accept() {
            Parse *pParse = this._pParse;
            if ((this._tracePrompt != null)) {
                Trace.WriteLine(String.Format("{0}Accept!", this._tracePrompt));
            }
            for (
            ; (this._idx >= 0); 
            ) {
                this.PopParserStack();
            }
            this._pParse = pParse;
        }
        #endregion
        #region Types: Tokens
        /// <summary>
        /// These constants (all generated automatically by the parser generator) specify the various kinds of tokens (terminals) that the parser understands.
        /// Each symbol here is a terminal symbol in the grammar.
        /// </summary>
        public enum TK_ {
            SEMI = 1,
            EXPLAIN = 2,
            QUERY = 3,
            PLAN = 4,
            BEGIN = 5,
            TRANSACTION = 6,
            DEFERRED = 7,
            IMMEDIATE = 8,
            EXCLUSIVE = 9,
            COMMIT = 10,
            END = 11,
            ROLLBACK = 12,
            SAVEPOINT = 13,
            RELEASE = 14,
            TO = 15,
            TABLE = 16,
            CREATE = 17,
            IF = 18,
            NOT = 19,
            EXISTS = 20,
            TEMP = 21,
            LP = 22,
            RP = 23,
            AS = 24,
            COMMA = 25,
            ID = 26,
            INDEXED = 27,
            ABORT = 28,
            ACTION = 29,
            AFTER = 30,
            ANALYZE = 31,
            ASC = 32,
            ATTACH = 33,
            BEFORE = 34,
            BY = 35,
            CASCADE = 36,
            CAST = 37,
            COLUMNKW = 38,
            CONFLICT = 39,
            DATABASE = 40,
            DESC = 41,
            DETACH = 42,
            EACH = 43,
            FAIL = 44,
            FOR = 45,
            IGNORE = 46,
            INITIALLY = 47,
            INSTEAD = 48,
            LIKE_KW = 49,
            MATCH = 50,
            NO = 51,
            KEY = 52,
            OF = 53,
            OFFSET = 54,
            PRAGMA = 55,
            RAISE = 56,
            REPLACE = 57,
            RESTRICT = 58,
            ROW = 59,
            TRIGGER = 60,
            VACUUM = 61,
            VIEW = 62,
            VIRTUAL = 63,
            REINDEX = 64,
            RENAME = 65,
            CTIME_KW = 66,
            ANY = 67,
            OR = 68,
            AND = 69,
            IS = 70,
            BETWEEN = 71,
            IN = 72,
            ISNULL = 73,
            NOTNULL = 74,
            NE = 75,
            EQ = 76,
            GT = 77,
            LE = 78,
            LT = 79,
            GE = 80,
            ESCAPE = 81,
            BITAND = 82,
            BITOR = 83,
            LSHIFT = 84,
            RSHIFT = 85,
            PLUS = 86,
            MINUS = 87,
            STAR = 88,
            SLASH = 89,
            REM = 90,
            CONCAT = 91,
            COLLATE = 92,
            BITNOT = 93,
            STRING = 94,
            JOIN_KW = 95,
            CONSTRAINT = 96,
            DEFAULT = 97,
            NULL = 98,
            PRIMARY = 99,
            UNIQUE = 100,
            CHECK = 101,
            REFERENCES = 102,
            AUTOINCR = 103,
            ON = 104,
            INSERT = 105,
            DELETE = 106,
            UPDATE = 107,
            SET = 108,
            DEFERRABLE = 109,
            FOREIGN = 110,
            DROP = 111,
            UNION = 112,
            ALL = 113,
            EXCEPT = 114,
            INTERSECT = 115,
            SELECT = 116,
            DISTINCT = 117,
            DOT = 118,
            FROM = 119,
            JOIN = 120,
            USING = 121,
            ORDER = 122,
            GROUP = 123,
            HAVING = 124,
            LIMIT = 125,
            WHERE = 126,
            INTO = 127,
            VALUES = 128,
            INTEGER = 129,
            FLOAT = 130,
            BLOB = 131,
            REGISTER = 132,
            VARIABLE = 133,
            CASE = 134,
            WHEN = 135,
            THEN = 136,
            ELSE = 137,
            INDEX = 138,
            ALTER = 139,
            ADD = 140,
        }
        #endregion
        #region Types: Minor
        [StructLayout(LayoutKind.Explicit)]
        public struct Minor {
            [FieldOffset(0)]
            public int yyinit;
            [FieldOffset(0)]
            public Token yy0;
            [FieldOffset(0)]
            public Int32 yy1;
            [FieldOffset(0)]
            public Select * yy2;
            [FieldOffset(0)]
            public ExprSpan yy3;
            [FieldOffset(0)]
            public ExprList * yy4;
            [FieldOffset(0)]
            public struct {int value; int mask;} yy5;
            [FieldOffset(0)]
            public uint8 yy6;
            [FieldOffset(0)]
            public SrcList * yy7;
            [FieldOffset(0)]
            public uint16 yy8;
            [FieldOffset(0)]
            public Expr * yy9;
            [FieldOffset(0)]
            public ExprList* yy10;
            [FieldOffset(0)]
            public struct LimitVal yy11;
            [FieldOffset(0)]
            public IdList* yy12;
            [FieldOffset(0)]
            public u8 yy13;
            [FieldOffset(0)]
            public IdList * yy14;
            [FieldOffset(0)]
            public struct ValueList yy15;
            [FieldOffset(0)]
            public struct LikeOp yy16;
            [FieldOffset(0)]
            public TriggerStep * yy17;
            [FieldOffset(0)]
            public struct TrigEvent yy18;
            [FieldOffset(0)]
            public Expr* yy19;
        }
        #endregion
        #region Types: StackEntry
        /// <summary>
        /// The following structure represents a single element of the parser's stack.  Information stored includes:
        ///  +  The state number for the parser at this level of the stack.
        ///  +  The value of the token stored at this level of the stack. (In other words, the "major" token.)
        ///  +  The semantic value stored at this level of the stack.  This is the information used by the action routines in the grammar. It is sometimes called the "minor" token.
        /// </summary>
        public struct StackEntry {
            // The state-number
            public ushort stateno;
            // The major token value.  This is the code number for the token at this stack level
            public byte major;
            // The user-supplied minor token value.  This is the value of the token
            public Minor minor;
        }
        #endregion
        #region Types: RuleInfo
        public struct RuleInfo {
            public byte LHSymbol;
            public byte RHSymbols;
            public RuleInfo(byte lhSymbol, byte rhSymbols) {
                this.LHSymbol = lhSymbol;
                this.RHSymbols = rhSymbols;
            }
        }
        #endregion
    }
}
